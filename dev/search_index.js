var documenterSearchIndex = {"docs":
[{"location":"Optimization/1-第一个要解决的设计优化问题/#第一个要解决的设计优化问题","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/#.基本信息","page":"第一个要解决的设计优化问题","title":"1.基本信息","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"地点：","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"新疆哈密\n气象数据","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"系统：","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"离网系统：不连接电网","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"系统组件：","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"- 电源：光伏\r\n- 热源：热泵\r\n- 氢能：电解水制氢+储氢罐+燃料电池发电","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"系统结构参考文献  (见wolai  https://www.wolai.com/6DDLR3UZQMS1M4bK2tctXg)","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"- 在此基础上，增加热泵用于提供热负荷\r\n\n  [热泵COP计算](https://www.wolai.com/efiXSi9XbcmhtkPWavNq4r)","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"负荷：某小区的热/电负荷","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"年度总电负荷EL：794.13 MWh\n年度总热负荷HL：1749.26 MWh","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"(Image: img)","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"小时负荷文件（kWh）：(详情见 wolai https://www.wolai.com/6DDLR3UZQMS1M4bK2tctXg  有相关excel附件)","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/#.能源系统建模","page":"第一个要解决的设计优化问题","title":"2.能源系统建模","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/#系统设计","page":"第一个要解决的设计优化问题","title":"系统设计","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"描述负荷场景，能源系统结构与运行方式","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/#组件模型","page":"第一个要解决的设计优化问题","title":"组件模型","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"详细介绍各组件的计算模型","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/#.优化问题建模","page":"第一个要解决的设计优化问题","title":"3.优化问题建模","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"优化问题概述，并使用数学语言描述优化问题","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/#优化变量","page":"第一个要解决的设计优化问题","title":"优化变量","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"变量名称，类型，变量域","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/#优化目标","page":"第一个要解决的设计优化问题","title":"优化目标","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"优化目标函数计算方法","category":"page"},{"location":"Optimization/1-第一个要解决的设计优化问题/#约束条件","page":"第一个要解决的设计优化问题","title":"约束条件","text":"","category":"section"},{"location":"Optimization/1-第一个要解决的设计优化问题/","page":"第一个要解决的设计优化问题","title":"第一个要解决的设计优化问题","text":"能量守恒、物理设备约束等","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue2笔记","page":"-","title":"3.Vue2笔记","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"nodejs","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"node express","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"webpack","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue核心组件化编程","page":"-","title":"1.Vue核心+组件化编程","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.初识Vue：","page":"-","title":"1.初识Vue：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"要点：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.root容器里的代码符合html规范，只不过混入了一些特殊得Vue语法","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.root容器里的代码被称为[vue模版]","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.容器和实例一一对应","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.注意区分js表达式和js代码（语句）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(1).a","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(2)a+b","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(3)demo(1)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(4)x===y?'a':'b'    [三目表达式]","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"js代码（语句）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(1)if(){}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(2)for(){}","category":"page"},{"location":"Front_end/3-Vue2笔记/#.模版语法","page":"-","title":"2.模版语法","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-bind ====>简写为   ：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"vue 模版语法有2大类：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.插值语法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"功能：用于解析标签体内容","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"写法：{{xxx}},xxx是js表达式，且可以直接读取到data中的所有属性。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.指令语法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"功能：用于解析标签（包括：标签属性、标签体内容、绑定事件.....）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"举例：v-bind:href=\"xxx\"或简写为  :href=\"xxx\"，xxx同样要写js表达式且可以直接读取到data中的所有属性","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注：Vue中有很多的指令，且形式都是：v-????,此处我们只是拿v-bind举例子","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>模版语法</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id=\"root\">\n    <h1>插值语法</h1>\n    <h3>你好，{{name}}</h3>\n    <hr/>\n    <h1>指令语法</h1>\n    <a v-bind:href=\"school.url.toUpperCase()\">点我去百度</a>\n    <a :href=\"school.url\">点我又去百度</a>\n    </div>\n\n    <script type=\"text/javascript\">\n    new Vue({\n        el:\"#root\",\n        data:{\n            name:'chd',\n            school:{\n                name:\"chdchd\",\n                url:\"https://www.baidu.com/?tn=15007414_20_dg\"\n\n            }\n            \n        }\n    })\n    </script>\n    \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.数据绑定","page":"-","title":"3.数据绑定","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"Vue中有2种数据绑定方式：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.单项绑定（v-bind）：数据只能从data流向页面。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.双向绑定（v-model）:数据不仅能从data流向页面，还能从页面流向data","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.双向绑定一般都应用在表单类元素上（如：input、select等）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>数据绑定</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <!-- 普通写法 -->\n        单项数据绑定：<input type=\"text\" v-bind:value=\"name\"><br/>\n        双项数据绑定：<input type=\"text\" v-model:value=\"name\"><br/>\n\n        <!-- 简写 -->\n        单项数据绑定：<input type=\"text\" :value=\"name\"><br/>\n        双项数据绑定：<input type=\"text\" v-model=\"name\"><br/>\n        \n        <!-- 如下代码是错误的,因为v-model只能应用在表单类元素(输入类元素)上\n        <h2 v-model:x=\"name\">nihao</h2> -->\n    </div>\n    \n</body>\n\n<script type=\"text/javascript\">\n    new Vue({\n        el:'#root',\n        data:{\n            name:\"chd\"\n        }\n\n    })\n</script>    \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.el与data的两种写法","page":"-","title":"4.el与data的两种写法","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"data与el的2种写法","category":"page"},{"location":"Front_end/3-Vue2笔记/#.el有2种写法","page":"-","title":"1.el有2种写法","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1) new Vue时候配置el属性","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）先创建Vue实例，随后再通过vm.mount('#root')指定el的值","category":"page"},{"location":"Front_end/3-Vue2笔记/#.data有两种写法","page":"-","title":"2.data有两种写法","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）对象式","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）函数式","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"如何选择：组件运用时要用函数式","category":"page"},{"location":"Front_end/3-Vue2笔记/#.一个重要的原则：","page":"-","title":"3.一个重要的原则：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <h1>你好，{{name}}</h1>\n    </div>\n    \n</body>\n\n    <script type=\"text/javascript\">\n        // const v = new Vue({\n        //     //el:'#root',//第一种写法\n        //     data:{\n        //         name:'chd'\n        //     }\n        // })\n        // console.log(v)\n        // v.$mount('#root')//第二种写法\n        // 定时器演示\n        // console.log(v)\n        // setTimeout(() => {\n        //     v.$mount('#root')\n        // },1000);\n    new Vue({\n        el:'#root',\n        // //data的第一种写法：对象式\n        // data:{\n        //     name:'hello'\n        // }\n        \n        //data的第二种写法：函数式（组件时必须使用）\n        data:function(){\n            console.log('@@@',this)\n            return{\n                name:'chhd'\n            }\n        }\n    })\n    </script>\n  \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.理解MVVM","page":"-","title":"5.理解MVVM","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"vue的设计受到了MVVM的启发","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"MVVM模型：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.M:模型（Model）:对应data中的数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.V：试图（View）:模版","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.VM：视图模型（ViewModel）:Vue实例对象","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"观察发现","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.data中所有的属性，最后都出现在vm上","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.vm身上所有的属性，以及Vue原型上所有属性，在Vue模版中都可以直接使用","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <h1>学校名称：{{name}}</h1>\n        <h1>学校地址：{{address}}</h1>  \n        <h1>测试一下1:{{1+1}}</h1>\n        <h1>测试一下1:{{_c}}</h1>\n        <!-- VIEW -->\n    </div>\n    \n</body>\n\n<script type=\"text/javascript\">\n    vm = new Vue({//VIEWMODEL\n        el:'#root',\n        data:{\n            name:'hello',\n            address:'beijing' //MODEL\n        }\n    })\n    console.log(vm)\n</script>    \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.数据代理","page":"-","title":"6.数据代理","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.回顾Object.defineProperty方法","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>回顾Object.defineProperty方法</title>\n    <!-- <script type=\"text/javascript\" src=\"../js/vue.js\"></script> -->\n</head>\n<body>\n    <div id =\"root\">\n        \n    </div>\n    \n<script type=\"text/javascript\">\n    let number =20\n    let person = {\n        name:'ss',\n        sex:'nan',\n        \n    }\n\n    Object.defineProperty(person,'age',{\n        // value:18,\n        // enumerable:true,//可枚举\n        // writable:true,//可修改\n        // configurable:true, //控制属性是否被删除 \n        \n        //当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值\n        get:function(){\n            return number\n        },\n\n\n        //当有人修改person的age属性时，set函数（setter）就会被调用，且会收到修改的具体值\n        set(value){\n            console.log('sss',value)\n            number=value\n        }\n    })  \n    console.log(Object.keys(person))\n    console.log(person)\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.何为数据代理","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>何为数据代理</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写） -->\n<script type=\"text/javascript\">\n    let obj={x:100}\n    let obj2={y:200}\n\n    Object.defineProperty(obj2,'x',{\n      get(){\n        return obj.x\n      },\n      set(value){\n        obj.x = value\n      }\n      //简单来说就是通过改变obj2.x里的数改变了obj的x。这就是一个简单的数据代理\n    })\n</script>\n</body>  \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.Vue中的数据代理","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"数据代理就好比右图中的实线部分，实现的功能好比就是将data里的name和address放在vm里。这样在编写代码时更为方便，不用vm._data.name这样的写法，而直接vm.name即可。背后的逻辑也是实现了getter()和setter()的这样一个过程，也就是通过Object.defineProperty进行的实现。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <h2>学校名称：{{name}}</h2>\n        <h2>学校地址：{{address}}</h2>\n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm =new Vue({\n        el:'#root',\n        data:{\n            name:'ccchhhddd',\n            address:'beijing'\n        }\n        //埋一个数据劫持的坑\n    })\n</script> \n</body> \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.事件处理","page":"-","title":"7.事件处理","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#**1.事件的基本使用：**","page":"-","title":"1.事件的基本使用：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.使用v-on：xxx 或 @xxx 绑定事件，其中xxx是事件名；","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.事件的回调需要配置在methods对象中，最终会在vm上；","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.methods中配置的函数，不要用箭头函数：否则this就不是vm了","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象；","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.@click=\"demo\" 和@click=\"demo\"(event)效果一致，但后者可以传参；","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <h2>{{name}}欢迎你</h2>\n        <button v-on:click=\"showInfo1\">点我提示信息（不传参）</button>\n        <button v-on:click=\"showInfo2(66,$event)\">点我提示信息2（传参）</button>\n    </div>\n\n\n<script type=\"text/javascript\">\n\n\n\n    const vm=new Vue({\n        el:'#root',\n        data:{\n            name:'Beijing'\n        },\n        methods:{\n            showInfo1(event){\n                console.log(event.target)\n                alert('nihao')\n            },\n            showInfo2(number,event){//最好别放在data里，会进行无意义的数据代理，这个东西只是用来被别人调用的\n                console.log(number,event)\n                alert(number)\n            }\n        }\n    })\n</script> \n</body> \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"补充概念：JavaScript事件的冒泡","category":"page"},{"location":"Front_end/3-Vue2笔记/#事件冒泡的概念","page":"-","title":"事件冒泡的概念","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"事件冒泡是指当一个元素触发了某个事件（例如点击事件），该事件将从最内层的元素开始，逐级向外传播到父元素，直到传播到文档根节点。这种事件传播的过程就是事件冒泡。","category":"page"},{"location":"Front_end/3-Vue2笔记/#事件冒泡的处理方式","page":"-","title":"事件冒泡的处理方式","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"在处理事件冒泡时，有两种常用的方式：停止事件冒泡和使用事件委托。","category":"page"},{"location":"Front_end/3-Vue2笔记/#停止事件冒泡","page":"-","title":"停止事件冒泡","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"通过停止事件冒泡，可以阻止事件继续向父元素传播。在事件处理函数中，可以使用event.stopPropagation()方法来停止事件冒泡。调用该方法后，事件将不再传播到父元素。","category":"page"},{"location":"Front_end/3-Vue2笔记/#.事件修饰符","page":"-","title":"2.事件修饰符","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"vue中的事件修饰符：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.prevent:阻止默认事件（常用）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.stop:阻止事件冒泡（常用）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.once:事件只触发一次（常用）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.capture：使用事件的捕获模式 ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.self:只有event.target是当前操作的元素时才触发事件 这个案例相当于阻止了冒泡事件的发生","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"6.passive:事件的默认行为立即执行，无需等待事件回调执行完毕","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n    <style>\n        /*  通配符*  */\n        *{\n            margin-top :20px;\n        }\n        .demo1{\n            height: 50px;\n            background-color: aqua;\n        }\n        .box1{\n            padding: 5px;\n            background-color: skyblue;\n        }\n        .box2{\n            padding: 5px;\n            background-color: orange;\n        }\n        .list{\n            width:200px;\n            height: 200px;\n            background-color: peru;\n            overflow: auto;\n        }\n        li{\n           height: 100px; \n        }\n    </style>\n\n</head>\n<body>\n    <div id =\"root\">\n        <!-- prevent:阻止默认事件（常用） -->\n        <a href=\"https://www.baidu.com/?tn=15007414_20_dg\" @click.prevent=\"showInfo\">点击去{{name}}</a>\n        <!--stop:阻止事件冒泡（常用） -->\n    <div class=\"demo1\" @click.self=\"showInfo\">\n        <button @click.stop=\"showInfo\">点点试试</button>\n    </div>\n\n    <!--once:事件只触发一次（常用）  -->\n    <button @click.once=\"showInfo\">点点试试</button>\n</br>\n    <!-- capture：使用事件的捕获模式 -->\n    <div class=\"box1\" @click.capture=\"showMsg(1)\">\n        div1\n        <div class=\"box2\" @click=\"showMsg(2)\">\n        div2   \n        </div>\n    </div>\n   \n    <!-- self:只有event.target是当前操作的元素时才触发事件 这个案例相当于阻止了冒泡事件的发生 -->\n    <div class=\"demo1\" @click.self=\"showInfo\">\n    <button @click=\"showInfo\">点点试试</button>\n    </div>\n    <!-- passive:事件的默认行为立即执行，无需等待事件回调执行完毕 -->\n    <ul @wheel.passive=\"demo\" class=\"list\">\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>\n    </ul>\n\n    </div>\n\n\n<script type=\"text/javascript\">\n    new Vue({\n        el:'#root',\n        data:{\n            name:'百度'\n        },\n    methods:{\n        showInfo(e){\n            // e.stopPropagation()\n            alert('同学你好')\n            //console.log(e.target)\n        },\n\n        showMsg(msg){\n            console.log(msg)\n        },\n        demo(){\n            for (let i=0;i<100000;i++){\n                console.log('#')\n            }\n            console.log('wanle')\n        }\n    }\n    })\n</script> \n</body> \n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.键盘事件","page":"-","title":"3.键盘事件","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.vue中常用的按键别名：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"回车=>enter","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"删除=>delete(捕获“删除”和“退格键”)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"退出=>esc","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"空格=>space","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"换行=>tab","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"上=>up","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"下=>down","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"左=>left","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"右=>right","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case(短横线命名)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.系统修饰键（用法特殊）：ctrl、alt、shift、meta","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t(1)配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）配合keydown使用：正常触发事件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.也可以使用keyCode去指定具体的按键（不推荐）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.Vue.config.keyCodes.自定义键名=键码，可以去定制按键别名 （  直接关机键绑事件  【狗头】）","category":"page"},{"location":"Front_end/3-Vue2笔记/#.事件总结","page":"-","title":"4.事件总结","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"修饰符可以连写","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"例如：@keyup.ctrl.y   或者@click.stop.prevent","category":"page"},{"location":"Front_end/3-Vue2笔记/#.计算属性","page":"-","title":"8.计算属性","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"计算属性：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.定义：要用的属性不存在，要通过已有属性计算得来","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.原理：底层借助了Object.defineproperty方法提供的getter和setter","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.get函数什么时候执行？","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）初次读取时会执行一次","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）当依赖的数据发生变化时会被再次调用","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.备注：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.计算属性最终会出现在vm上，直接读取使用即可","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        姓：<input type=\"text\" v-model=\"firstname\"><br/><br/>\n        名：<input type=\"text\" v-model=\"lastname\"><br/><br/>\n        测试：<input type=\"text\" v-model=\"x\"><br/><br/>\n        姓名：<span>{{fullname}}</span><br/><br/>\n        姓名：<span>{{fullname}}</span><br/><br/>\n        姓名：<span>{{fullname}}</span><br/><br/>\n        姓名：<span>{{fullname}}</span><br/><br/>\n        姓名：<span>{{fullname}}</span>\n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm = new Vue({\n        el:'#root',\n        data:{\n            firstname:'张',\n            lastname:'三',\n            x:'你好'\n        },\n        computed:{\n            fullname:{\n            //get有什么作用？当有人读取fullname时，get就会被调用，且返回值就作为fullname的值\n            //get什么时候调用？1.初次读取fullname时2.所依赖的数据发生变化时\n            get() {\n                console.log('get被调用')\n                //console.log(this)//此处的this=vm\n                return this.firstname +'-'+ this.lastname\n            },\n            //set什么时候调用？当fullName被修改时\n            set(value){\n                console.log('set被调用',value)    \n                const arr = value.split('-')\n                this.firstname = arr[0]\n                this.lastname = arr[1]\n            } \n            }\n        }\n        \n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.监视属性","page":"-","title":"9.监视属性","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.监视属性watch:","page":"-","title":"1.监视属性watch:","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.当被监视的属性变化时，回调函数自动调用，进行相关操作","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.监视的属性必须存在，才能进行监视","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.监视的两种写法;","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）new Vue时传入watch配置","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）通过vm.watch监视","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>今天天气很{{info}}</h2>   \n    <button @click=\"cw\">切换天气</button>\n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm = new Vue({\n        el:'#root',\n        data:{\n            isHot:true,\n        },\n        computed:{\n            info(){\n                return this.isHot ?'炎热':'凉爽'\n            }\n        },\n        methods: {\n            cw(){\n                this.isHot = ! this.isHot\n            }\n        },\n        //监视的两个方法\n        // watch:{\n        //     isHot:{\n        //     immediate:true,//初始化时让handler调用一下\n        //     //handler什么时候调用？当isHot发生改变时。\n        //     handler(newvalue,oldvalue){\n        //         console.log('info被修改了',newvalue,oldvalue)\n        //     }    \n        //     }\n        // }\n\n    })\n    vm.$watch('isHot',{\n        immediate:true,//初始化时让handler调用一下\n            //handler什么时候调用？当isHot发生改变时。\n            handler(newvalue,oldvalue){\n                console.log('info被修改了',newvalue,oldvalue)\n            } \n\n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.深度监视","page":"-","title":"2.深度监视","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"要点：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）Vue中的watch默认不监测对象内部值的改变（一层）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）配置deep:true可以监测对象内部值改变（多层）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"注：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）使用watch时根据数据的具体结构。决定是否采用深度监测","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>今天天气很{{info}}</h2>   \n    <button @click=\"cw\">切换天气</button>\n    <hr/>\n    <h3>a的值是:{{numbers.a}}</h3>\n    <button @click=\"numbers.a++\">点我让a+1</button>\n    <h3>a的值是:{{numbers.b}}</h3>\n    <button @click=\"numbers.b++\">点我让b+1</button>\n    <button @click=\"numbers = {a:666,b:888}\">彻底更换numbers</button>\n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm = new Vue({\n        el:'#root',\n        data:{\n            isHot:true,\n            numbers:{\n             a:1,\n             b:1  \n            }\n        },\n        computed:{\n            info(){\n                return this.isHot ?'炎热':'凉爽'\n            }\n        },\n        methods: {\n            cw(){\n                this.isHot = ! this.isHot\n            }\n        },\n        //监视有两个方法\n        //方法一\n        watch:{\n            isHot:{\n            immediate:true,//初始化时让handler调用一下\n            //handler什么时候调用？当isHot发生改变时。\n            handler(newvalue,oldvalue){\n                console.log('info被修改了',newvalue,oldvalue)\n            }\n        }, \n            // 监视多级结构中某个属性的变化  \n            'numbers.a':{\n                deep:true,\n                handler(){\n                    console.log('a被改变了')\n                }\n            }\n        }\n        \n        //监视多级结构中所有属性的变化\n        // numbers:{\n        //         deep:true,\n        //         handler(){\n        //             console.log('numbers中有属性被改变了')\n        //         }\n        //     }   \n        // }\n        \n\n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.监视属性_简写","page":"-","title":"3.监视属性_简写","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>今天天气很{{info}}</h2>   \n    <button @click=\"cw\">切换天气</button>\n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm = new Vue({\n        el:'#root',\n        data:{\n            isHot:true,\n        },\n        computed:{\n            info(){\n                return this.isHot ?'炎热':'凉爽'\n            }\n        },\n        methods: {\n            cw(){\n                this.isHot = ! this.isHot\n            }\n        },\n        //监视有两个方法\n        //方法一\n        watch:{\n            // isHot:{\n            // //正常写法\n            // immediate:true,//初始化时让handler调用一下\n            // //handler什么时候调用？当isHot发生改变时。\n            // //deep:true ,//深度监视\n            // handler(newvalue,oldvalue){\n            //     console.log('info被修改了',newvalue,oldvalue)\n            //         }\n            //     }\n        //简写\n        // isHot(newvalue,oldvalue){\n        //     console.log(\"isHot被修改\",newvalue,oldvalue)\n        // }\n        }})\n        //正常写法\n        // vm.$watch('isHot',{immediate:true,//初始化时让handler调用一下\n        //     // //handler什么时候调用？当isHot发生改变时。\n        //     // //deep:true ,//深度监视\n        //      handler(newvalue,oldvalue){\n        //          console.log('info被修改了',newvalue,oldvalue)\n        //              }\n        //          }\n\n        // )\n        //简写 \n        vm.$watch('isHot',function(newvalue,oldvalue){\n            console.log('info被修改了',newvalue,oldvalue)\n        })\n   \n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.计算属性和监视属性的区别（computed和watch）","page":"-","title":"4.计算属性和监视属性的区别（computed和watch）","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.computed能完成的功能，watch都可以完成","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作","category":"page"},{"location":"Front_end/3-Vue2笔记/#**重要原则：**","page":"-","title":"重要原则：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.所被vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.所有不被Vue所管理的函数（定时器的回调函数，ajax的回调函数、promise回调函数等），最好写成箭头函数，这样this的指向才是vm或组件实例对象。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>姓名案例_watch实现</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        姓：<input type=\"text\" v-model=\"firstname\"><br/><br/>\n        名：<input type=\"text\" v-model=\"lastname\"><br/><br/>\n        姓名：<span>{{fullname}}</span><br/><br/>\n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm = new Vue({\n        el:'#root',\n        data:{\n            firstname:'张',\n            lastname:'三',\n            fullname:\"张-三\"//初始值需要自己设定\n        },\n        watch:{\n            firstname(newvalue){\n                setTimeout(() => {//这个地方要写成箭头函数，括号里，没写东西，所以就往外找，this就指定为vm。否则指定为Windows，由js引擎帮忙调用\n                    this.fullname = newvalue +'-' +this.lastname\n                }, 1000);\n                 \n            },\n            lastname(newvalue){\n                this.fullname = this.firstname+'-' + newvalue\n            },\n            \n            }\n        }\n\n           \n        \n        \n    )\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.绑定样式","page":"-","title":"10.绑定样式","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <style>\n        .basic{\n            width: 400px;\n            height: 100px;\n            border: 1px solid black;\n        }\n        .sad{\n            border-color: green;\n            background-color: gray;\n        }\n        .happy{\n            border-color: red;\n            background-color: yellow;\n        }\n        .normal{\n            border-color: blue;\n            background-color: brown;\n        }\n        .chd1{\n            font-style: oblique;\n        }\n        .chd2{\n            font-size: 30px;           \n        }\n        .chd3{\n            border-color: skyblue;\n        }\n    </style>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <!-- 绑定class样式--字符串写法，适用于：样式的类别不确定，需要动态指定 -->\n    <div class=\"basic\" :class=\"mood\" @click=\"change\">{{name}}</div>\n    </br></br>\n    <!-- 绑定class样式--数组写法，适用于：适用于要样式个数不确定，名字也不确定 -->\n    <div class=\"basic\" :class=\"arr\" >{{name}}</div>\n    </br></br>\n    <!-- 绑定class样式--数组写法，适用于：适用于要绑定样式个数确定，名字也确定，但要动态决定用不用 -->\n    <div class=\"basic\" :class=\"classobj\">{{name}}</div>\n    </br></br>\n    <!-- 绑定style样式--对象写法 -->\n    <div class=\"basic\" :style=\"styleobj\">{{name}}</div>\n    \n    </div>\n\n\n<script type=\"text/javascript\">\n    const vm=new Vue({\n        el:'#root',\n        data:{\n            name:'ccchhhddd',\n            mood:\"basic\",\n            arr:['chd1','chd2','chd3'],\n            classobj:{\n                chd1:false,\n                chd2:false,\n            },\n            styleobj:{\n                fontSize:'40px',\n                color: 'red',\n                backgroundColor:'green'\n            }\n        },\n        methods: {\n            change(){\n                const arr =['happy','sad','normal']\n                const index = Math.floor(Math.random()*3)\n                this.mood = arr[index]\n            }\n            \n        },\n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.条件渲染","page":"-","title":"11.条件渲染","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#**1.v-if**","page":"-","title":"1.v-if","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"写法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）v-if=\"表达式\"","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）v-else-if=\"表达式\"","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（3）v-else=\"表达式\"","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"适用于：切换频率较低的场景","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"特点：不展示的DOM元素直接被移除","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"注意：v-if可以和：v-else-if和v-else 一起使用。但要求结构不能被”打断“","category":"page"},{"location":"Front_end/3-Vue2笔记/#**2.v-show**","page":"-","title":"2.v-show","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"写法：v-show=\"表达式\"","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"适用于：切换频率较高的场景","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉","category":"page"},{"location":"Front_end/3-Vue2笔记/#**3.备注:**","page":"-","title":"3.备注:","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"使用v-if的时候，元素可能无法获取到，而使用v-show一定可以获取到","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <h2>当前的n值是:{{n}}</h2>\n        <button @click=\"n++\">点我n+1</button>\n        <!-- 使用v-show做条件渲染 -->\n        <!-- <h2 v-show=\"false\">欢迎来到{{name}}</h2>     -->\n\n        <!-- 使用v-if做条件渲染 -->\n        <!-- <h2 v-if=\"false\">欢迎来到{{name}}</h2> -->\n\n        <!-- 注意： v-if和v-else-if这组结构中间不允许被打断 -->\n        <div v-if=\"n===1\">angular</div>\n        <div v-else-if=\"n===2\">react</div>\n        <div v-else-if=\"n===3\">Vue</div>\n        <div v-else>hhh</div>\n        \n\n        <!-- v-if和template的配合使用（不能和v-show） -->\n        <template v-if=\"n===1\">\n            <h2>你好</h2>\n            <h2>chd</h2>\n            <h2>hhh</h2>\n        </template>\n\n    </div>\n\n\n<script type=\"text/javascript\">\n    new Vue({\n        el:'#root',\n        data:{\n            name:'chd',\n            n:0\n        }\n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.列表渲染","page":"-","title":"12.列表渲染","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.基本列表","page":"-","title":"1.基本列表","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#v-for指令：","page":"-","title":"v-for指令：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.用于展示列表数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.语法：v-for=\"(item,index) in xxx\" :key='yyy'","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.可遍历：数组、对象、字符串、指定次数","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n        <!-- 遍历数组(用的最多) -->\n    <h2>人员列表</h2>\n    <ul>\n        <li v-for=\"(p,index) of persons\" :key=\"index\">\n            {{p.name}}-{{p.age}}\n        </li>\n    </ul>\n\n    <!-- 遍历对象 -->\n    <h2>汽车信息</h2>\n    <ul>\n        <li v-for=\"(value,k) of car\" :key=\"k\">\n            {{k}}-{{value}}\n        </li>\n    </ul>\n    \n    <!-- 遍历字符串 -->\n    <h2>测试遍历字符串</h2>\n    <ul>\n        <li v-for=\"(char,index) of str\" :key=\"index\">\n            {{index}}-{{char}}\n        </li>\n    </ul>\n\n    <!-- 遍历指定次数 -->\n    <h2>测试遍历字符串</h2>\n    <ul>\n        <li v-for=\"(number,index) of 5\" :key=\"index\">\n            {{index}}-{{number}}\n        </li>\n    </ul>\n    </div>\n\n\n<script type=\"text/javascript\">\n    new Vue({\n        el:'#root',\n        data:{\n            persons:[\n                {id:\"001\",name:'张三',age:18},\n                {id:'002',name:'李四',age:19},\n                {id:'003',name:'王五',age:20}\n            ],\n            car:{\n                name:'奥迪A8',\n                price:'70万',\n                color:'red'\n            },\n            str:'hello'\n\n        }\n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue面试重点题：vue中的key有什么作用？（key的内部原理）","page":"-","title":"2.Vue面试重点题：vue中的key有什么作用？（key的内部原理）","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.虚拟DOM中key的作用：","page":"-","title":"1.虚拟DOM中key的作用：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\tkey是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：","category":"page"},{"location":"Front_end/3-Vue2笔记/#.对比规则;","page":"-","title":"2.对比规则;","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(1)旧虚拟DOM 中找到了与新虚拟DOM相同的key:","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t1)若虚拟DOM中的内容没变，直接使用之前的真实DOM","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t2）若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）旧虚拟DOM中未找到与新虚拟DOM相同的key:","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t创建新的真实DOM，随后渲染到页面","category":"page"},{"location":"Front_end/3-Vue2笔记/#.用index作为key可能会引发的问题：","page":"-","title":"3.用index作为key可能会引发的问题：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t1）若对数据进行：逆序添加、逆序删除等破坏顺序操作：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t会产生没有必要的真实DOM更新===》 界面效果没问题，但效率低","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t2）如果结构中还包含输入类的DOM：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t会产生错误DOM更新 ===》界面有问题","category":"page"},{"location":"Front_end/3-Vue2笔记/#.开发中如何选择key?","page":"-","title":"4.开发中如何选择key?","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t1.最好使用每条数据的唯一标识作为key,比如 id、手机号、身份证号、学号等唯一标识","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。","category":"page"},{"location":"Front_end/3-Vue2笔记/#.列表过滤","page":"-","title":"3.列表过滤","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>列表过滤</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>人员列表</h2>\n    <input type=\"text\" placeholder=\"输入名字\" v-model=\"keyword\">\n    <ul>\n        <li v-for=\"(p,index) of filPersons\" :key=\"index\">\n            {{p.name}}-{{p.age}}-{{p.sex}}\n        </li>\n    </ul>\n    </div>\n\n   \n\n\n<script type=\"text/javascript\">\n    // 用watch实现\n    // new Vue({\n    //     el:'#root',\n    //     data:{\n    //         keyword:'',\n    //         persons:[\n    //             {id:\"001\",name:'马冬梅',age:19,sex:'女'},\n    //             {id:'002',name:'周冬雨',age:20,sex:'女'},\n    //             {id:'003',name:'周杰伦',age:21,sex:'男'},\n    //             {id:'004',name:'温兆伦',age:22,sex:'男'},\n    //         ],\n    //         filPersons:[]\n\n    //     },\n    //     watch:{\n    //         keyword:{\n    //             immediate:true,\n    //             handler(val){\n    //                 this.filPersons = this.persons.filter((p)=>{\n    //                 return p.name.indexOf(val) !==-1\n    //             })\n                \n    //         }\n    //         }\n    //     }\n    // })\n\n    new Vue({\n        el:'#root',\n        data:{\n            keyword:'',\n            persons:[\n                {id:\"001\",name:'马冬梅',age:19,sex:'女'},\n                {id:'002',name:'周冬雨',age:20,sex:'女'},\n                {id:'003',name:'周杰伦',age:21,sex:'男'},\n                {id:'004',name:'温兆伦',age:22,sex:'男'},\n             ],\n        },\n        computed:{\n            filPersons(){\n               return this.persons.filter((p)=>{\n                 return p.name.indexOf(this.keyword) !==-1   \n                })\n            }\n        }          \n        }\n    )\n</script> \n</body>\n</html>\n","category":"page"},{"location":"Front_end/3-Vue2笔记/#.列表排序","page":"-","title":"4.列表排序","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>列表过滤</title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>人员列表</h2>\n    <input type=\"text\" placeholder=\"输入名字\" v-model=\"keyword\">\n    <button @click=\"sortType=2\">年龄升序</button>\n    <button @click=\"sortType=1\">年龄降序</button>\n    <button @click=\"sortType=0\">原顺序</button>\n    <ul>\n        <li v-for=\"(p,index) of filPersons\" :key=\"p.id\">\n            {{p.name}}-{{p.age}}-{{p.sex}}\n        </li>\n    </ul>\n    </div>\n\n   \n\n\n<script type=\"text/javascript\">\n// 列表排序用computed实现\n    new Vue({\n        el:'#root',\n        data:{\n            keyword:'',\n            sortType:0,//0原顺序，1降序，2升序\n            persons:[\n                {id:\"001\",name:'马冬梅',age:12,sex:'女'},\n                {id:'002',name:'周冬雨',age:11,sex:'女'},\n                {id:'003',name:'周杰伦',age:28,sex:'男'},\n                {id:'004',name:'温兆伦',age:50,sex:'男'},\n             ],\n        },\n        computed:{\n            filPersons(){\n               const arr= this.persons.filter((p)=>{\n                 return p.name.indexOf(this.keyword) !==-1   \n                })\n\n                if(this.sortType){\n                    arr.sort((p1,p2)=>{\n                        return this.sortType ===1 ? p2.age-p1.age :p1.age-p2.age\n                    })\n                }\n\n                return arr\n            }\n        }          \n        }\n    )\n</script> \n</body>\n</html>\n","category":"page"},{"location":"Front_end/3-Vue2笔记/#.vue监测数据改变的原理","page":"-","title":"5.vue监测数据改变的原理","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"data里的每一项数据（包括细分的数据）都有对应的getter和setter,以这样的方式实现数据的监测和修改","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"如下图所示：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>学校名称：{{name}}</h2>\n    <h2>学校地址：{{address}}</h2>\n    </div>\n   \n<script type=\"text/javascript\">\n// 列表排序用computed实现\n    const vm =new Vue({\n        el:'#root',\n        data:{\n            name:'chd',\n            address:\"beijing\",\n            student:{\n                name:'tom',\n                age:{\n                    sage:20,\n                    tage:18\n                }\n            }            \n        },               \n        }\n    )\n</script> \n</body>\n</html>\n","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue.set的使用","page":"-","title":"6.Vue.set的使用","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"用法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(比如 this.myObject.newProperty = 'hi')","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"注意：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"对象不能是 Vue 实例，或者 Vue 实例的根数据对象。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>学校名称：{{name}}</h2>\n    <h2>学校地址：{{address}}</h2>\n    <hr/>\n    <h1>学生信息</h1>\n    <button @click=\"addsex\">添加一个性别信息</button>\n    <h2>学生姓名：{{student.name}}</h2>\n    <h2>学生年龄：真实{{student.age.rage}},对外{{student.age.sage}}</h2>\n    <h2 v-if=\"student.sex\">性别:{{student.sex}}</h2>\n    <h2>朋友们</h2>\n    <ul>\n        <li v-for=\"(f,index) in student.friends\" :key=\"index\">\n            {{f.name}}---{{f.age}}\n        </li>\n    </div>\n   \n<script type=\"text/javascript\">\n// 列表排序用computed实现\n    const vm =new Vue({\n        el:'#root',\n        data:{\n            name:'chd',\n            address:\"beijing\",\n            student:{\n                name:'tom',\n                age:{\n                    sage:20,\n                    rage:18\n                },\n                friends:[\n                    {name:'eecc',age:30},\n                    {name:'eveve',age:14}\n                ]\n\n                \n            }            \n        },\n        methods: {\n            addsex(){\n                Vue.set(this.student,'sex','男')\n                // this.$set(this.student,'sex','男')\n            }\n        },               \n        }\n    )\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue监测数据改变的原理","page":"-","title":"7.Vue监测数据改变的原理","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"push()\t\npop()\nshift()\nunshift()\nsplice()\nsort()\nreverse()","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"你可以打开控制台，然后对前面例子的 items 数组尝试调用变更方法。比如 example1.items.push({ message: 'Baz' })","category":"page"},{"location":"Front_end/3-Vue2笔记/#.总结Vue数据监测","page":"-","title":"8.总结Vue数据监测","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"Vue监视数据的原理：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.Vue会监视data中所有层次的数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.如何监测对象的数据？","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t通过setter实现监视，且要在new Vue时就传入要检测的数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）对象中后追加的属性，Vue默认不做响应式处理","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）如需给后添加的属性做响应式，请使用如下API: \t\t\tVue.set(targer,propertyName,value)或","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\tvm.set(target,propertyName/index,value)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.如何监测数组中的数据？","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t通过包裹数组更新元素的方法实现，本质就是做了两件事：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（1）调用原生对应的方法对数组进行更新","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（2）重新解析模版，进行更新页面","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.在Vue修改数组中的某个元素一定要用如下方法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（1）使用这些API：push()  、pop() 、shift()  、unshift()  、splice()","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t(2)Vue.set()  或 vm.set()","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"注意：Vue.set() 和vm.set() 不能给vm或vm的根数据对象 添加属性！！！","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"spilce() 的一个用法\nthis.student.hobby.splice(0,1,'xc')\n//Vue.set(this.student.hobby.0,'xc')\n//this.$set(this.student.hobby,0,'xc')","category":"page"},{"location":"Front_end/3-Vue2笔记/#.收集表单数据","page":"-","title":"13.收集表单数据","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"若：<input type='text'/>则v-model收集的是value值。用户输入就是value的值","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"若：<input type='radio'/>,则v-model收集的是value值，且要给标签配置value值","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"若：<input type='checkbox'/>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是bool值）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.v-model 的初始值是数组，那么收集的是value组成的数组","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注：v-model的三个修饰符：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\tlazy:失去焦点再收集数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\tnumber:输入字符串转为有效数字","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\ttrim:输入收尾空格过滤","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n      <form @submit.prevent=\"demo\">\n        \n        账号：<input type=\"text\" v-model.trim=\"userInfo.account\"><br/><br/>\n        密码：<input type=\"password\" v-model=\"userInfo.password\"><br/><br/>\n        年龄：<input type=\"number\" v-model.number=\"userInfo.age\"><br/><br/>\n        性别：\n        男<input type=\"radio\" name=\"sex\" v-model=\"userInfo.sex\" value=\"male\">\n        女<input type=\"radio\" name=\"sex\" v-model=\"userInfo.sex\" value=\"female\"><br/><br/>\n        爱好：\n        学习<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"study\">\n        打游戏<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"play\">\n        唱歌<input type=\"checkbox\" v-model=\"userInfo.hobby\" value=\"sing\"><br/><br/>\n        所属校区\n        <select v-model=\"userInfo.city\">\n            <option value=\"\">请选择校区</option>\n            <option value=\"beijing\">北京</option>\n            <option value=\"shanghai\">上海</option>\n            <option value=\"nanjing\">深圳</option>\n        </select><br/><br/>\n        其他信息： \n        <textarea v-model.lazy=\"userInfo.other\"></textarea><br/><br/>\n        <input type=\"checkbox\" v-model=\"userInfo.agree\">阅读并接受<a href=\"http://www.baidu.com\">《用户协议》</a>\n        <button>提交</button>\n    </form>\n    </div>\n\n\n<script type=\"text/javascript\">\n    new Vue({\n        el:'#root',\n        data:{\n            userInfo:{\n            account:'',\n            password:'',\n            sex:'',\n            age:'',\n            hobby:[],\n            city:'',\n            other:'',\n            agree:''\n        }\n            \n        },\n        methods: {\n            demo(){\n               console.log(JSON.stringify(this.userInfo))\n            }\n        },\n    })\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.过滤器","page":"-","title":"14.过滤器","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑得处理）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"语法:","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.注册过滤器： Vue.filter(name,callback) 或 new Vue(filters:{})","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.使用过滤器：{{ xxx | 过滤器名}}  或 v-bind: 属性 = ‘xxx |过滤器名’","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.过滤器也可以接受额外参数，多个过滤器也可以串联","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.并没有改变原本的数据，是产生新的对应的数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n    <script type=\"text/javascript\" src=\"../js/cdn.bootcdn.net_ajax_libs_dayjs_1.11.7_dayjs.min.js\"></script>\n</head>\n<body>\n    <div id =\"root\">\n    <h2>显示格式化后的时间</h2> \n     <!--计算属性实现  -->\n    <h3> 1现在是:{{fmtTime}}</h3>\n    \n    <!--methods实现 -->\n    <h3> 2现在是:{{getfmtTime()}}</h3>\n\n    <!--过滤器实现 -->\n    <h3> 3现在是:{{time | timeFormater}}</h3>\n\n    <!--过滤器实现(传参+串联) -->\n    <h3> 4现在是:{{time | timeFormater('YYYY-MM-DD') | mySlice}}</h3>\n    </div>\n\n\n<script type=\"text/javascript\">\n    //全局过滤器\n    // Vue.filters('mySlice',function(value){\n    //     return value.slice(0,4)\n    // })\n    new Vue({\n        el:'#root',\n        data:{\n            time:1621561377603,//时间戳\n        },\n        computed:{\n            fmtTime(){\n                return dayjs(this.time).format('YYYY-MM-DD HH:mm:ss')\n            }\n        },\n        methods: {\n            getfmtTime(){\n                return dayjs(this.time).format('YYYY年MM月DD日 HH:mm:ss')\n            }\n        },\n        //局部的过滤器\n        filters:{\n            timeFormater(value,str='YYYY年MM月DD日 HH:mm:ss'){\n                return dayjs(value).format(str)\n            },\n            mySlice(value){\n                return value.slice(0,4)\n            }\n        }\n    }            \n    )\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.内置指令","page":"-","title":"15.内置指令","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-bind : 单向绑定解析表达式，可简写为： xxx","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-model : 双向数据绑定","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-for : 遍历数组/对象/字符串","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-on ： 绑定事件监听，可简写为@","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-if : 条件渲染（动态控制节点是否存在）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-else : 条件渲染（动态控制节点是否存在）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-show : 条件渲染（动态控制节点是否展示）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-text指令：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.作用：向其所在的节点中渲染文本内容","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.与差值语法的区别：v-text会替换掉节点中的内容，{{xx}}不会","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-html指令：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.作用：向指定节点中渲染包含html结构的内容","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.与差值语法的区别：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（1）v-html会替换掉节点中所有的内容，{{xx}}不会","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（2）v-html可以识别html结构","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.严重注意：v-html有安全性问题","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（1）在网站上动态渲染任意html是非常危险的，容易导致XSS攻击","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（2）一定要在可信的内容上使用v-html。永远不要在用户提交的内容上用v-html","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"补充cookie:","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-clock指令（没有值）：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-clock属性","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.使用css配合v-cloak可以解决网速慢时页面展示出{{xxx}}的问题。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-once指令：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.v-once所在节点在初次渲染后，被视为静态内容了","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-pre指令：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.跳过其所在节点的编译过程","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译","category":"page"},{"location":"Front_end/3-Vue2笔记/#.自定义指令","page":"-","title":"16.自定义指令","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"总结：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"一、定义语法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）局部指令：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\tnew Vue({","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\tdirectives:{指令名：配置对象}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"})","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"或","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"new Vue({","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\tdirectives{指令名：回调函数}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"})","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）全局指令","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\tVue.directive{指令名，配置对象） 或Vue.directive(指令名，回调函数)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"二、配置对象中常用的3个回调：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（1）bind:指令与元素成功绑定时调用","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（2）inserted:指令所在元素被插入页面时调用","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（3）update:指令所在模版结构被重新解析时调用","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"三、备注：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t1.指令定义时不加v-,但使用时要加v-;","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名（驼峰命名法）。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <!-- 需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍\n         需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。 -->\n    <div id =\"root\">\n     <h2>当前的n值是:<span v-text=\"n\"></span></h2>\n     <h2>放大10倍后的n值是:<span v-big=\"n\"></span></h2>\n     <button @click=\"n++\">点我n+1</button>\n     <hr/>\n     <input type=\"text\" v-fbind:value=\"n\">\n    </div>\n\n\n<script type=\"text/javascript\">\n    new Vue({\n        el:'#root',\n        data:{\n            n:1,\n        },\n        directives:{\n            //big函数何时会被调用？1.指令与元素成功绑定时（一上来）2.指令所在的模版被重新解析时\n            big(element,binding){\n                element.innerText = binding.value*10\n                //console.log(element,binding.value)\n            },\n            fbind:{\n                //指令与元素成功绑定时（一上来）\n               bind(element,binding){\n                element.value =binding.value\n               },\n               //指令所在元素被插入页面时\n                inserted(element,binding){\n                    element.focus()\n                },\n                //指令所在的模版被重新解析时\n                update(element,binding){\n                    element.value =binding.value \n                },\n            }\n            }\n        }\n    \n            \n    )\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.生命周期","page":"-","title":"17.生命周期","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"生命周期：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.又名：生命周期回调函数、生命周期函数、生命周期钩子","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.是什么：Vue在关键时刻帮助我们调用的一些特殊名称的函数","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.生命周期函数中的this指向是vm或组件实例对象\t","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"常用的生命周期钩子：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.mounted:发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.beforeDestroy:清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"关于销毁Vue实例：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.销毁后借助Vue开发者工具看不到任何信息","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.销毁后自定义事件会失效，但原生DOM事件依然有效","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"图示：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"(Image: Vue 实例生命周期)","category":"page"},{"location":"Front_end/3-Vue2笔记/#.组件化编程","page":"-","title":"18.组件化编程","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#**1.Vue中使用组件的三大步骤：**","page":"-","title":"1.Vue中使用组件的三大步骤：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.定义组件（创建组件）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.注册组件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.使用组件","category":"page"},{"location":"Front_end/3-Vue2笔记/#**一、如何定义一个组件？**","page":"-","title":"一、如何定义一个组件？","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但区别如下：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.el不要写，为什么？","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"——最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.data必须写成函数，为什么？","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"——避免组件被复用，数据存在引用关系","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注：使用template可以配置组件结构","category":"page"},{"location":"Front_end/3-Vue2笔记/#**二、如何注册组件？**","page":"-","title":"二、如何注册组件？","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.局部注册：靠new Vue的时候传入components选项","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.全局注册：靠Vue.component('组件名'，组件)","category":"page"},{"location":"Front_end/3-Vue2笔记/#**三、编写注册组件：**","page":"-","title":"三、编写注册组件：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<school></school>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.基本使用.html","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <!-- 准备好一个容器 -->\n    <div id =\"root\">\n   <!-- 第三步:编写组件标签 -->\n    <school></school>\n     <hr>\n    <student></student>\n    </div>\n\n\n<script type=\"text/javascript\">\n    //第一步：创建school组件\n    const a =Vue.extend({\n        //el:'#root',  //组件定义时，不要写el配置顶，因为最终所有的组件都要被一个vm管理\n        template:`\n        <div>\n        <h2>学校名称：{{schoolname}}</h2>\n        <h2>学校地址：{{address}}</h2>\n        <button @click='showname'>点我提示学校名</button>\n        </div>\n        `,\n        data(){//函数式\n            return{\n            schoolname:'jiaoda',\n            address:'xian', \n            }},\n            methods: {\n                showname(){\n                    alert(this.schoolname)\n                }\n            },\n\n        }\n    )\n    //第二步：创建student组件\n    const b =Vue.extend({\n        \n        //el:'#root',  //组件定义时，不要写el配置顶，因为最终所有的组件都要被一个vm管理\n        template:`\n        <div>\n        <h2>学生姓名：{{name}}</h2>\n        <h2>学生年龄：{{age}}</h2>\n        </div>\n        `,\n        data(){\n            return{\n            name:'chd',\n            age:20, \n            }}     \n        }\n    )\n\n\n    //创建vm\n    new Vue({\n        el:'#root',\n        //第二步：注册组件（局部注册）\n        components:{\n            school:a,//组件名在这里定\n            student:b\n        }  }            \n    )\n</script> \n</body>\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.几个注意的要点","page":"-","title":"2.几个注意的要点","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.关于组件名：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"一个单词组成：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第一种写法（首字母小写）：school","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第二种写法（首字母大写）：School","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"多个单词组成：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第一种写法（kebab-case命名）：my-school","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第二种写法（CamelCase命名）：MySchool(需要Vue脚手架支持)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注:","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t(1)组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）可以使用name配置项指定组件在开发者工具中呈现的名字","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.关于组件标签","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第一种写法：<school></school>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第二种写法：<school/>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.一个简写方式：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"const school =Vue.extend(options) 可简写为：const school = options","category":"page"},{"location":"Front_end/3-Vue2笔记/#.VueComponent","page":"-","title":"3.VueComponent","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"关于VueComponent:","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t3.特别注意：每次调用Vue.extend,返回的都是一个全新的VueComponent !!!","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t4.关于this指向：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t(1)组件配置中：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\tdata函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（2）new Vue(options)配置中：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\tdata函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t5.VueComponent的实例对象、以后简称vc（也可称之为：组件实例对象）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"Vue的实例对象，以后简称vm","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t6.因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。（vm和vc的异同）","category":"page"},{"location":"Front_end/3-Vue2笔记/#.一个重要的内置关系","page":"-","title":"4.一个重要的内置关系","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.一个重要的内置关系：VueComponent.prototype.proto ===Vue.prototype","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.为什么要有这个关系：让组件实例对象（vc）可以访问到Vue原型上的属性、方法","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"../js/vue.js\"></script>\n</head>\n<body>\n    <!-- 准备好一个容器 -->\n    <div id =\"root\">\n    <school></school>\n    </div>\n</body>\n\n<script type=\"text/javascript\">\n    Vue.prototype.x=99//得益于VueComponent.prototype.__proto__ === Vue.prototype这个内置重要关系\n   const school =Vue.extend({\n        name:'school',\n        //el:'#root',  //组件定义时，不要写el配置顶，因为最终所有的组件都要被一个vm管理\n        template:`\n        <div>\n        <h2>学校名称：{{schoolname}}</h2>\n        <h2>学校地址：{{address}}</h2>\n        <button @click='showX'>点我输出X</button>  \n        </div>\n        `,\n        data(){//函数式\n            return{\n            schoolname:'jiaoda',\n            address:'xian', \n            }},\n        methods: {\n            showX(){\n            console.log(this.x)\n            },\n        },\n    })\n   const vm=new Vue({\n    el:'#root',\n    data:{\n        msg:'你好'\n    },\n    components:{\n        school\n    }\n   })\n   //console.log(school.prototype.__proto__ === Vue.prototype)\n    // function Demo(){\n    //     this.a=1\n    //     this.b=2\n    // }\n    // //创建一个Demo的实例对象\n    // const d= new Demo()\n    \n    // console.log(Demo.prototype) //显示原型属性\n    // console.log(d.__proto__)//隐式原型属性\n\n    // //程序员通过显示原型属性操作原型对象，追加一个x属性，值为99\n    // Demo.prototype.x = 99\n\n    // console.log('@',d)\n\n</script> \n\n</html>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.使用Vue脚手架","page":"-","title":"2.使用Vue脚手架","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.单文件组件脚手架简介相关函数相关配置","page":"-","title":"1.单文件组件+脚手架简介+相关函数+相关配置","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"xxxxx.Vue","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.webpack","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.脚手架  Vue CLI  动能：浏览器不能直接识别并运行Vue文件，需要通过脚手架的环境配置的支持","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。\n最新的版本是 4.x。\n文档: https://cli.vuejs.org/zh/","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.模版目录框架","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── node_modules","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── public ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ ├── favicon.ico: 页签图标","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ └── index.html: 主页面","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── src","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ ├── assets: 存放静态资源 ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ │└── logo.png ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ │── component: 存放组件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ │ └── HelloWorld.vue","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ │── App.vue: 汇总所有组件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"│ │── main.js: 入口文件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── .gitignore: git 版本管制忽略的配置","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── babel.config.js: babel 的配置文件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── package.json: 应用包配置文件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── README.md: 应用描述文件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"├── package-lock.json：包版本控制文件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.render函数","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"关于不同版本的Vue：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.vue.js与vue.runtime.xxx.js的区别：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（1）vue.js是完整版的Vue  包含：核心功能+模版解析器","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（2） vue.runtime.xxx.js是运行版的Vue ,只包含：核心功能，没有模版解析器","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.因为vue.runtime.xxx.js没有模版解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"main.js文件\n//该文件是整个项目的入口文件\n//引入Vue（注意：这里引入的vue只是大的文件夹，并没有指定到核心的vue.js，所以仍需要在下方引入render函数，做模版解析）\nimport Vue from 'vue'\n//引入App组件，它是所有组件的父组件\nimport App from './App.vue'\n//关闭Vue的生产提示\nVue.config.productionTip = false\n\n// 创建Vue的实例对象---vm\nnew Vue({\n  el:'#app',\n  // 完成功能：将App组件放入容器中\n  render: h => h(App),  //render函数只用在这里写一遍\n})\n","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.vue.config.js配置文件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"使用vue inspect  > output.js 可以查看到Vue脚手架的默认配置","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"使用vue.config.js可以对脚手架进行个性化定制，详情见：https://cli.vuejs.org/zh/config/#vue-config-js","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"6.ref属性","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.被用来给元素或子组件注册引用信息（id的替代者）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.使用方式：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t打标识：<h1 ref='xxx'>.....</h1>或<School ref='xxx'></SChool>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t获取：this.refs.xxx","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"7.配置项props","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t功能：让组件接收外部传来的数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（1）传递数据：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t<Demo name ='xxx'/>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t（2）接收数据：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t第一种方式（只接收）：\t\t","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":" props:['name','age','sex']//简单声明接收。 这里写了，data里就不能有了 ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t第二种方式（限制类型）：\t\t","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"// 接收的同时对数据进行类型限制\n        // props:{\n        //     name:String,\n        //     age:Number,\n        //     sex:String\n        // }","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t第三种方式（限制类型、限制必要性、指定默认值）：\t\t","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"props:{\n            name:{\n                type:String, //name的类型是字符串\n                required:true //name是必要的\n            },\n            age:{\n                type:Number,\n                default:99 //默认值\n            },\n            sex:{\n                type:String,\n                require:true\n            }\n        }","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"如下是一个名叫Student.vue的文件例子","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<template>\n        <div>\n        <h1>{{ msg }}</h1>\n        <h2>学生姓名：{{name}}</h2>\n        <h2>学生年龄：{{Myage}}</h2>\n        <button @click=\"chageage\">点我年龄++</button>\n        <h2>学生性别：{{sex}}</h2>\n        </div>       \n</template>\n\n<script>\n\n    export default {\n        name:'MyStudent',   \n        data(){//函数式\n            return{\n            msg:'我是一名学生',\n            Myage:this.age//这里利用的是props的优先级比data高实现的，也就是说程序先去扫描props里的数据。\n            \n            }},\n            methods:{\n                chageage(){\n                    this.Myage++\n                }\n            },\n        // props:['name','age','sex']//简单声明接收。 这里写了，data里就不能有了  \n\n        // 接收的同时对数据进行类型限制\n        // props:{\n        //     name:String,\n        //     age:Number,\n        //     sex:String\n        // }\n\n        // 接收的同时对数据：进行类型限制+默认值的指定+必要性的限制\n        props:{\n            name:{\n                type:String, //name的类型是字符串\n                required:true //name是必要的\n            },\n            age:{\n                type:Number,\n                default:99 //默认值\n            },\n            sex:{\n                type:String,\n                require:true\n            }\n        }}\n</script>\n\n<style>\n</style>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"8.mixin(混入)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"功能：可以把多个组件共用的配置提取成一个混入对象","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"使用方法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t第一步定义混合，例如：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"{","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"data(){....},","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"methods:{....}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"....","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t第二步使用混入，例如：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（1）全局混入：Vue.mixin(xxx)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"（2）局部混入：mixins:['xxx']","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"9.插件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"功能：用于增强Vue","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"本质：包含install方法的一个对象，install的第一个参数是Vue,第二个以后得参数是插件使用者传递的数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"定义插件：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"export default{\n    install(Vue,x,y,z){\n        console.log(x,y,z)\n\n    //全局过滤器\n    Vue.filter('mySlice',function(value){\n        return value.slice(0,4)\n    })\n    //定义全局指令\n    Vue.directive('fbind',{\n        //指令与元素成功绑定时（一上来）\n        bind(element,binding){\n            element.value = binding.value\n        },\n    //指令所在元素被插入页面时\n    inserted(element){\n        element.focus()\n    },\n    //指令所在的模版被重新解析时\n    update(element,binding){\n        element.value = binding.value\n    }\n    })\n\n    //定义混入\n    Vue.mixin({\n        data(){\n            return{\n                x:100,\n                y:200\n            }\n        }\n    })\n    //给Vue原型上添加一个方法\n    Vue.prototype.hello = ()=>{alert('nihaoya')}\n    //添加实例方法\n    Vue.prototype.$myMethod = function(){...}\n    Vue.prototype.$myProperty = xxxx\n}\n}\n","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"使用插件：Vue.use()","category":"page"},{"location":"Front_end/3-Vue2笔记/#.scoped样式","page":"-","title":"2.scoped样式","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"作用：让样式在局部生效，防止冲突","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"写法：<style scoped>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<template>\n        <div class=\"demo\">\n        <h2>学生姓名：{{name}}</h2>\n        <h2 class=\"qwe\">学生性别：{{sex}}</h2>\n        \n        </div>       \n</template>\n\n<script>    \n    export default {\n        name:'MyStudent',  \n        data(){//函数式\n            return{\n            name:'cccchhhhddd',\n            sex:'男'\n            }},\n          \n    \n        }\n</script>\n\n<!-- 要用less 要安装less-loader 指令：npm i less-loader -->\n<!-- 用less的好处：可以嵌套着写 -->\n<style lang=\"less\" scoped>\n// 不写lang就默认是CSS\n/* 加入scoped .demo就不担心存在重复的情况了,但此时demo只能在School组件里使用 */\n.demo{\n  background-color:pink;\n  .qwe{\n    font-size:40px;\n  }\n}\n</style>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Todo-list案例","page":"-","title":"3.Todo-list案例","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"组件化编码流程（通用）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.实现静态组件：抽取组件，使用组件实现静态页面效果 ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.展示动态数据： 2.1. 数据的类型、名称是什么？ 2.2. 数据保存在哪个组件？ ","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.交互——从绑定事件监听开始","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"注：父亲给儿子可以传函数、数组.....在此基础上儿子调用先前父亲给儿子传的函数方法，儿子也可以给父亲传数据","category":"page"},{"location":"Front_end/3-Vue2笔记/#**总结todolist案例：**","page":"-","title":"总结todolist案例：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.组件化编码流程：","page":"-","title":"1.组件化编码流程：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（1）拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（2）实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t1）一个组件再用：放在组件自身即可。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t2)一些组件在用，放在他们共同的父组件上（状态提升）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t（3）实现交互：从绑定事件开始","category":"page"},{"location":"Front_end/3-Vue2笔记/#.props适用于：","page":"-","title":"2.props适用于：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t(1)父组件==>子组件 通信","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t(2)子组件===>父组件 通信 （要求父先给子一个函数）","category":"page"},{"location":"Front_end/3-Vue2笔记/#.使用v-model时要切记：","page":"-","title":"3.使用v-model时要切记：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"v-model绑定的值不能是props传过来的值，因为props是不可以修改的！","category":"page"},{"location":"Front_end/3-Vue2笔记/#.props传过来的若是对象类型的值：","page":"-","title":"4.props传过来的若是对象类型的值：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"修改对象中的属性时Vue不会报错，但不推荐这样做","category":"page"},{"location":"Front_end/3-Vue2笔记/#.webStorage（浏览器存储）","page":"-","title":"4.webStorage（浏览器存储）","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.存储大小一般支持5MB左右（不同浏览器不一样）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.浏览器通过Window.sessionStorage和Window.localStorage 属性来实现本地存储机制","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.相关API","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1. xxxxxxStorage.setItem('key','value');\n该方法接受一个键和值作为参数，会把键值对添加到存储中，如果建名存在，则更新其对应的值\n2.xxxxxxStorage.getItem('person');\n该方法接受一个建名作为参数，返回键名对应的值\n3.xxxxxxStorage.removeItem('key');\n该方法接受一个建名作为参数，并把该建名从存储中删除\n4.xxxxxxStorage.clear()\n该方法会清空存储中的所有数据","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.备注：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.SessionStorage存储的内容会随着浏览器窗口关闭而消失\n2.LocalStorage存储的内容，需要手动清除才会消失\n3.xxxxxxStorage.getItem(xxxx) 如果xxx对应的value获取不到，那么getItem的返回值是null\n4.JSON.parse(null)的结果依然是null","category":"page"},{"location":"Front_end/3-Vue2笔记/#.组件的自定义事件","page":"-","title":"5.组件的自定义事件","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.一种组件间通信的方式，适用于： 子组件==>父组件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t3.绑定自定义事件：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t1.第一种方式，在父组件中：<Demo @atguigu='test'/>  或<Demo v-on:atguigu='test'/>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t2.第二种方式，在父组件中：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<Demo ref='demo'/>\n......\nmounted(){\nthis.$refs.xxx.$on('atguigu',this.test)\n}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t3.若想让自定义事件只能触发一次，可以使用once修饰符，或once方法","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.触发自定义事件：this.emit('atguigu',数据)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"5.解绑自定义事件 this.off('atguigu')","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"6.组件上也可以绑定原生DOM事件，需要使用native修饰符","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"7.注意：通过 this.refsxxxon('atguigu',回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题。【直接用function,this指的是xxx组件】","category":"page"},{"location":"Front_end/3-Vue2笔记/#.全局事件总线","page":"-","title":"6.全局事件总线","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.一种组件间通信的方式，适用于任意组件间通信","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.安装全局事件总线：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"new Vue({\n  ......\n  boforeCreate(){\n    Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm\n        },\n    .....\n})","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.使用事件总线：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.接受数据：A组件想接收数据，则在A组件中给bus绑定自定义事件，事件的回调留在A组件自身","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"methods(){\n  demo(data){....}\n}\n......\nmounted(){\n  this.$bus.$on('xxxx',this.demo)\n}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.提供数据：this.busemit('xxxx',数据)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"4.最好在beforeDestroy钩子中，用off去解绑当前组件所用到的事件","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"原理图：","category":"page"},{"location":"Front_end/3-Vue2笔记/#.消息订阅与发布（pubsub）","page":"-","title":"7.消息订阅与发布（pubsub）","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.一种组件间通信的方式，适用于任意组件间通信","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.使用步骤：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t1.安装pubsub：npm i pubsub-js","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t2.引入： import pubsub from 'pubsub-js'","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t3.接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"methods(){\ndemo(data){....}\n}\n......\nmounted(){\nthis.pid = pubsub.subscribe('xxx',this.demo) //订阅消息\n}","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t4.提供数据： pubsub.publish('xxx',数据)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t5.最好在beforeDestroy钩子中，用PubSub.unsubscribe(pid)去取消订阅。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"原理图：","category":"page"},{"location":"Front_end/3-Vue2笔记/#.nextTick","page":"-","title":"8.nextTick","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.语法： this.nextTick(回调函数)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.作用： 在下一次DOM更新结束后执行其指定的回调","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"handleEdit(todo){\n        \n            if('isEdit'== undefined){\n                todo.isEdit = true\n            }\n            else{\n                this.$set(todo,'isEdit',true)\n            }\n            // 若没有外包一个东西的话，下面这行代码会执行，但是input还未出现，所以并没有显示相应的结果\n            // 这是Vue在考虑效率时设置的形式。 异步？\n            // $nextTick官方写法:\n            this.$nextTick(function(){\n                this.$refs.inputtitle.focus()\n            })\n            //或者 setTimeout(()=>{\n            // this.$refs.inputtitle.focus()\n            // })\n           },","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue封装的过度与动画","page":"-","title":"9.Vue封装的过度与动画","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.图示：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.写法：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.准备好样式：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t元素进入的样式：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t1.v-enter :进入的起点","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t2.v-enter-active:进入过程中","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t3.v-enter-to:进入的终点","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t元素离开时的样式：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t1.v-leave:离开的起点","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t2.v-leave-active:离开过程中","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t\t\t3.v-leave-to:离开的终点","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.使用<transition>包裹要过度的元素，并配置name属性：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<transition name=\"hello\">\n  <h1 v-show=\"isShow\">你好啊！</h1>\n</transition>","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.备注：若有多个元素需要过度，则需要使用：<transition-group>,且每个元素都要指定key值","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"例子：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"<template>\n  <div>\n    <button @click=\"isShow = !isShow\"> 显示/隐藏</button>\n    <!--引入第三方动画 -->\n    <transition-group\n    appear \n    name=\"animate__animated animate__bounce\"  \n    enter-active-class=\"animate__rubberBand\"\n    leave-active-class=\"animate__backOutUp\"\n    >\n        <h1 v-show=\"!isShow\" key=\"1\">你好哈哈哈哈！</h1>\n        <h1 v-show=\"isShow\" key=\"2\">ccchhhddd</h1>\n    </transition-group>\n  </div>\n</template>\n\n<script>\nimport 'animate.css'\nexport default {\n    name:'MyTest3',\n    data(){\n        return{\n            isShow:true\n        }\n    }\n}\n</script>\n\n<style scoped>\n    h1{\n        background-color: orange;\n    }\n     \n</style>","category":"page"},{"location":"Front_end/3-Vue2笔记/#.Vue中的ajax","page":"-","title":"3.Vue中的ajax","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.前端服务器相关文章与视频","page":"-","title":"1.前端服务器相关文章与视频","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.用Node.js搭建一个简单Web服务器","page":"-","title":"1.用Node.js搭建一个简单Web服务器","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"https://blog.csdn.net/m0_46171043/article/details/132033934","category":"page"},{"location":"Front_end/3-Vue2笔记/#.【笔记】-node.js-开启本地服务器，返回json数据","page":"-","title":"2.【笔记】 node.js - 开启本地服务器，返回json数据","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"https://blog.csdn.net/LawssssCat/article/details/103459796","category":"page"},{"location":"Front_end/3-Vue2笔记/#.FeHelper前端助手浏览器插件-chrome插件-Web开发者助手-FeHelper","page":"-","title":"3.FeHelper前端助手浏览器插件 chrome插件-Web开发者助手 FeHelper","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"https://blog.csdn.net/A598853607/article/details/124118482","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"可以直接在谷歌应用商店里下载","category":"page"},{"location":"Front_end/3-Vue2笔记/#.【原生Ajax】全面了解xhr的概念与使用","page":"-","title":"4.【原生Ajax】全面了解xhr的概念与使用","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"http://www.shouxieziti.cn/29383.html","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"xhr、jQuery现阶段用的比较少了，随着Vue和react框架的兴起axios用到比较多了","category":"page"},{"location":"Front_end/3-Vue2笔记/#.尚硅谷Web前端axios入门与源码解析（视频链接）","page":"-","title":"5.尚硅谷Web前端axios入门与源码解析（视频链接）","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"https://www.bilibili.com/video/BV1wr4y1K7tq/?spmidfrom=333.337.search-card.all.click&vd_source=ab1c31a8db0c1b9114896077df5b64aa","category":"page"},{"location":"Front_end/3-Vue2笔记/#.解决跨域问题","page":"-","title":"2.解决跨域问题","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"协议、域名、端口号都对的上即不存在跨域问题","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"方法1：cors","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"方法2：jsonp(需要前后端配合，很巧妙)","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"方法3：配置代理服务器","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.nginx","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.vue-cli(下面用到的)","category":"page"},{"location":"Front_end/3-Vue2笔记/#方法一：在vue.config.js中添加如下配置","page":"-","title":"方法一：在vue.config.js中添加如下配置","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"devServer: {\n    proxy: 'http://localhost:5000'","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"说明：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.优点：配置简单，请求资源时直接发给前端（8080）即可。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.缺点：不能配置多个代理，不能灵活的控制请求是否走代理","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"3.工作方式：若按照上述的代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"方法二：编写vue.config.js配置具体代理规则：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"module.exports = defineConfig({\n  // 开启代理服务器(方式2)\n  devServer: {\n    proxy: {\n      '/chd': {\n        target: 'http://localhost:5000',\n        pathRewrite:{'^/chd':''},\n        ws: true,//用于支持websocket\n        // changeOrigin: true //用于控制请求头中的host值 \n      },\n      '/demo': {\n        target: 'http://localhost:5001',\n        pathRewrite:{'^/demo':''},\n        // ws: true,//用于支持websocket\n        // changeOrigin: true //用于控制请求头中的host值 \n      },\n    }\n  }\n    // changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000\n  // changeOrigin设置为fasle时，服务器收到的请求头中的host为：localhost:8080\n  // changeOrigin默认值为true\n})\n","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"说明：","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"1.优点：可以配置多个代理，且可以灵活的控制请求是否走代理","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"2.缺点：配置略微繁琐，请求资源时必须加前缀","category":"page"},{"location":"Front_end/3-Vue2笔记/#.vue_github搜索案例","page":"-","title":"3.vue_github搜索案例","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"https://blog.csdn.net/liaoai/article/details/123431352","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"上面链接里的案例没有用到main.js自身作为bus的全局事件总线","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"我后面进行了部分的简化可以省去不少的内容","category":"page"},{"location":"Front_end/3-Vue2笔记/#.插槽","page":"-","title":"4.插槽","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"认识Vue中组件利器-插槽Slot-案例介绍","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"https://blog.csdn.net/JackieDYH/article/details/124481953","category":"page"},{"location":"Front_end/3-Vue2笔记/#.作用：","page":"-","title":"1.作用：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 父组件==>子组件","category":"page"},{"location":"Front_end/3-Vue2笔记/#.分类：","page":"-","title":"2.分类：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"默认插槽、具名插槽、作用域插槽","category":"page"},{"location":"Front_end/3-Vue2笔记/#.使用方式：","page":"-","title":"3.使用方式：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/#.默认插槽","page":"-","title":"1.默认插槽","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"父组件：\n<template>\n  <div class=\"container\">\n    <Category title=\"美食\">\n      <img src=\"https://s3.ax1x.com/2021/01/16/srJlq0.jpg\" alt=\"\">\n    </Category>\n\n    <Category title=\"游戏\" >\n      <ul>\n        <li v-for=\"(g,index) in games\" :key=\"index\">{{g}}</li>\n      </ul>\n    </Category>\n\n    <Category title=\"电影\">\n      <video controls src='./assets/shengqi.mp4'></video>\n    </Category>\n  </div>\n</template>\n\n<script>\nimport Category from './components/Category.vue'\nexport default {\n  name: \"App\",\n  components: { Category },\n  data(){\n    return{\n      foods:['火锅','烧烤','小龙虾','牛排'],\n      games:['红色警戒','穿越火线','英雄联盟','刀塔'],\n      films:['《教父》','《星际穿越》','《变形金刚》','《盗梦空间》']\n\n    }\n  }\n};\n</script>\n\n\n子组件：\n<template>\n  <div class=\"category\">\n    <h3>{{ title }}分类</h3>\n    <!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） -->\n    <slot>我是默认插槽，没有传递具体结构时，我会出现</slot>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:'MyCategory',\n    props:['title']\n}\n</script>\n\n","category":"page"},{"location":"Front_end/3-Vue2笔记/#.具名插槽","page":"-","title":"2.具名插槽","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"父组件：\n<template>\n  <div class=\"container\">\n    <Category title=\"美食\">\n      <img slot=\"center\"  src=\"https://s3.ax1x.com/2021/01/16/srJlq0.jpg\" alt=\"\">\n      <a class=\"foot\"  slot=\"footer\"  href=\"https://baidu.com\">百度</a>\n    </Category>\n\n    <Category title=\"游戏\" >\n      <ul slot=\"center\">\n        <li v-for=\"(g,index) in games\" :key=\"index\">{{g}}</li>\n      </ul>\n      <div class=\"foot\" slot=\"footer\">\n        <a solt=\"footer\"  href=\"https://baidu.com\">单机游戏</a>\n        <a solt=\"footer\"  href=\"https://baidu.com\">网络游戏</a>\n      </div>      \n    </Category>\n\n    <Category title=\"电影\">\n      <video  slot=\"center\" controls src='./assets/shengqi.mp4'></video>\n      <template v-slot:footer>\n        <div class=\"foot\">\n        <a solt=\"footer\"  href=\"https://baidu.com\">经典</a>\n        <a solt=\"footer\"  href=\"https://baidu.com\">热门</a>\n        <a solt=\"footer\"  href=\"https://baidu.com\">推荐</a>\n      </div>\n      <h4>欢迎前来观影</h4>\n      </template>\n      \n    </Category>\n  </div>\n</template>\n\n<script>\nimport Category from './components/Category.vue'\nexport default {\n  name: \"App\",\n  components: { Category },\n  data(){\n    return{\n      foods:['火锅','烧烤','小龙虾','牛排'],\n      games:['红色警戒','穿越火线','英雄联盟','刀塔'],\n      films:['《教父》','《星际穿越》','《变形金刚》','《盗梦空间》']\n\n    }\n  }\n};\n</script>\n\n\n\n\n子组件：\n<template>\n  <div class=\"category\">\n    <h3>{{ title }}分类</h3>\n    <!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） -->\n    <slot name=\"center\">我是默认插槽，没有传递具体结构时，我会出现1</slot>\n    <slot name=\"footer\">我是默认插槽，没有传递具体结构时，我会出现2</slot>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:'MyCategory',\n    props:['title']\n}\n</script>\n\n","category":"page"},{"location":"Front_end/3-Vue2笔记/#.作用域插槽：","page":"-","title":"3.作用域插槽：","text":"","category":"section"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t1.理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t（games数据在category组件中，但使用数据所遍历出来的结构由App组件决定）","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"​\t\t\t2.编码：\t","category":"page"},{"location":"Front_end/3-Vue2笔记/","page":"-","title":"-","text":"父组件:\n<template>\n  <div class=\"container\">\n    <Category title=\"游戏\" >\n      <template scope=\"duixiang\">\n        <ul slot=\"center\">\n          <li v-for=\"(g,index) in duixiang.games\" :key=\"index\">{{g}}</li>\n        </ul>\n      </template>     \n    </Category>\n\n    <Category title=\"游戏\" >\n      <!-- 解构赋值{} -->\n      <template scope=\"{games}\">\n        <ol>\n          <li style=\"color: red\" v-for=\"(g,index) in games\" :key=\"index\">{{g}}</li>\n        </ol>\n      </template>     \n    </Category>\n\n    <Category title=\"游戏\" >\n      <!-- 解构赋值{} -->\n      <template slot-scope=\"{games}\">\n        <h4 v-for=\"(g,index) in games\" :key=\"index\">{{g}}</h4>     \n      </template>     \n    </Category>\n    \n\n\n  </div>\n</template>\n\n<script>\nimport Category from './components/Category.vue'\nexport default {\n  name: \"App\",\n  components: { Category },\n  \n};\n</script>\n\n\n子组件：\n<template>\n  <div class=\"category\">\n    <h3>{{ title }}分类</h3>\n    <slot :games=\"games\"></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:'MyCategory',\n    props:['title'],\n    data(){\n    return{\n      games:['红色警戒','穿越火线','英雄联盟','刀塔'],\n    }\n  }\n}\n</script>\n","category":"page"},{"location":"Front_end/3-Vue2笔记/#","page":"-","title":"","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.Vuex","page":"-","title":"4.Vuex","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.vuex-是什么?","page":"-","title":"1 .vuex 是什么?","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"概念：专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应 用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方 式，且适用于任意组件间通信。 \nGithub 地址: https://github.com/vuejs/vuex ","category":"page"},{"location":"Front_end/4-Vuex/#.什么时候使用Vuex?","page":"-","title":"2 .什么时候使用Vuex?","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"多个组件依赖于同一状态\n来自不同组件的行为需要变更同一状态","category":"page"},{"location":"Front_end/4-Vuex/#.逻辑图：","page":"-","title":"3.逻辑图：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"(Image: vuex)","category":"page"},{"location":"Front_end/4-Vuex/#.基本使用","page":"-","title":"4.基本使用","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.具体案例","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"//index.js\n\n// 该文件用于创建Vuex中最为核心的store\n\nimport Vue from 'vue'\n// 引入Vuex\nimport Vuex from 'vuex'\nVue.use(Vuex)\n// 准备actions——用于相应组件中的动作\n// 业务逻辑写在action里面\nconst actions = {\n    // jia(context,value){\n    //     context.commit('JIA',value)\n    // },\n    // jian(context,value){\n    //     context.commit('JIAN',value)\n    // },\n    oddjia(context,value){\n        // console.log(state,context,value)\n        if(context.state.sum % 2 == 1){\n        context.commit('ODDJIA',value)\n        }\n    },\n    timejia(context,value){\n        setTimeout(()=>{\n            context.commit('TIMEJIA',value)\n        },500)\n    }\n}\n// 准备mutations——用于操作数据（state）\nconst mutations = {\n    JIA(state,value){\n        state.sum += value\n    },\n    JIAN(state,value){\n        state.sum -= value\n    },\n    ODDJIA(state,value){\n        state.sum += value\n    },\n    TIMEJIA(state,value){\n        state.sum += value\n    }\n}\n// 准备state——用于存储数据\nconst state = {\n    sum:0 //当前的和\n}\n\n// 创建store\nexport default new Vuex.Store({\n    actions,\n    mutations,\n    state\n})\n\n//组件Count.vue\n\n<template>\n  <div>\n    <h1> 当前求和为{{ $store.state.sum }}</h1>\n    <select v-model=\"n\">\n        <option :value=\"1\">1</option>\n        <option :value=\"2\">2</option>\n        <option :value=\"3\">3</option>\n    </select>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n    <button @click=\"incrementodd\">当前求和为奇数再加</button>\n    <button @click=\"incrementwait\">等一等再加</button>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:'MyCount',\n    data(){\n        return{\n            n:1,//用户选择的数字\n            \n        }\n    },\n    methods:{\n        increment(){\n            // 这里直接跳过了action（中间没有牵扯业务逻辑），所以直接用commit\n            this.$store.commit('JIA',this.n)\n        },\n        decrement(){\n            this.$store.commit('JIAN',this.n)\n        },\n        incrementodd(){\n            this.$store.dispatch('oddjia',this.n)  \n        },\n        incrementwait(){\n            this.$store.dispatch('timejia',this.n)     \n        }\n    },\n\n}\n</script>\n","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.组件中读取vuex中的数据：store.state.sum","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.组件中修改vuex中的数据：storedispatch(action中的方法名数据)或store.commit('mutations中的方法名'，数据)","category":"page"},{"location":"Front_end/4-Vuex/#.getters的使用","page":"-","title":"5.getters的使用","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.概念：当state中的数据需要经过加工后再使用时，可以使用getters加工","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.在store.js中追加getters配置","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"const getters = {\n    bigsum(state){\n        return state.sum*10\n    }\n}\n\n// 创建并暴露store\nexport default new Vuex.Store({\n    ...\n    getters\n\n})","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.组件中读取数据：store.getters.bigsum","category":"page"},{"location":"Front_end/4-Vuex/#.四个map方法的使用","page":"-","title":"6.四个map方法的使用","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.mapState方法：","page":"-","title":"1.mapState方法：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"帮我们映射state中的数据为计算属性","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"computed:{\n        // 1.靠程序员自己写的代码\n        // he(){\n        //     return this.$store.state.sum\n        // },\n        // xuexiao(){\n        //     return this.$store.state.subject\n        // },\n        // xueke(){\n        //     return this.$store.state.school\n        // },\n\n        // 2.借助mapState生成计算属性，从state中读取数据。（对象写法）\n        // ...mapState({sum:'sum',school:'school',subject:'subject'}),\n\n        // 3.借助mapState生成计算属性，从state中读取数据。（数组写法）\n        ...mapState(['sum','school','subject']),\n        }","category":"page"},{"location":"Front_end/4-Vuex/#.mapGetters方法：","page":"-","title":"2.mapGetters方法：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"用于帮助我们映射getters中的数据为计算属性","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"computed:{    \n    // 1.靠程序员自己写的代码\n        // bigsum(){\n        //     return this.$store.getters.bigsum \n        // },\n        // 2.借助mapGetters生成计算属性，从getters中读取数据。（数组写法）\n        ...mapGetters(['bigsum'])\n        }","category":"page"},{"location":"Front_end/4-Vuex/#.mapActions方法：","page":"-","title":"3.mapActions方法：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"用于帮助我们生成与actions对话的方法，即包含store.dispatch（xxx）的函数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"methods:{\n    // 1.程序员手写法\n        // incrementodd(){\n        //     this.$store.dispatch('oddjia',this.n)  \n        // },\n        // incrementwait(){\n        //     this.$store.dispatch('timejia',this.n)     \n        // }\n\n        // 2.借助mapActions生成的方法，方法会调用dispatch去联系actions(对象写法)\n        ...mapActions({incrementodd:'oddjia',incrementwait:'timejia'})\n\n}","category":"page"},{"location":"Front_end/4-Vuex/#.mapMutations方法：","page":"-","title":"4.mapMutations方法：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"用于帮助我们生成与mutations对话的方法，即包含store.commit(xxx)的函数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"  methods:{ \n    // 1.程序员手写\n        // increment(){\n        //     // 这里直接跳过了action（中间没有牵扯业务逻辑），所以直接用commit\n        //     this.$store.commit('JIA',this.n)\n        // },\n        // decrement(){\n        //     this.$store.commit('JIAN',this.n)\n        // },\n\n        // 2.借助mapMutations生成对应的方法，方法会调用commit去联系mutations(对象写法)\n        ...mapMutations({increment:'JIA',decrement:'JIA'}),\n        }","category":"page"},{"location":"Front_end/4-Vuex/#.模块化命名空间","page":"-","title":"7.模块化+命名空间","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.目的：让代码更好维护，让更多数据分类更加明确","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.修改store.js","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"// 求和相关配置\nconst countOptions= {\n    namespaced:true,\n    mutations:{...},\n    getters:{\n        bigsum(state){\n            return state.sum*10\n        }\n    }\n}\n\n// 人员相关配置\nconst personOptions= {\n    namespaced:true,\n    actions:{...},\n    mutations:{...},    \n}\n\n// 创建并暴露store\nexport default new Vuex.Store({\n    modules:{\n      a:countOptions,\n      b:personOptions\n    }\n})","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.开启命名空间后，组件中读取state数据：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"//1.自己直接读取\nthis.$store.state.a.list\n//2.借助mapState读取\n...mapState('a',['sum','school'])","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"4.开启命名空间后，组件中读取getters数据：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":" //1.自己直接读取\n this.$store.getters['b/fisrtpersonname']\n //2.借助mapGetters读取\n ...mapGetters('a',['bigsum'])","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"5.开启命名空间后，组件中调用dispatch","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":" //1.自己直接读取\n this.$store.dispatch['b/addpersonwang',person]\n //2.借助mapActions;\n ...mapActions('a',{increment:'oddjia',incrementwait:'timejia'})","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"6.开启命名空间后，组件中调用commit","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":" //1.自己直接commit\n this.$store.commit['b/ADDPERSON',person]\n //2.借助mapMutations:\n ...mapMutations('a',{increment:'JIA',decrement:'JIAN'})","category":"page"},{"location":"Front_end/4-Vuex/#.vue-router","page":"-","title":"5.vue-router","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.相关理解","page":"-","title":"1.相关理解","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.vue-router-的理解","page":"-","title":"1.vue-router 的理解","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"vue 的一个插件库，专门用来实现 SPA 应用 ","category":"page"},{"location":"Front_end/4-Vuex/#.对-SPA-应用的理解","page":"-","title":"2.对 SPA 应用的理解","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.单页 Web 应用（single page web application，SPA）。 ","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.整个应用只有一个完整的页面。 ","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.点击页面中的导航链接不会刷新页面，只会做页面的局部更新。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"数据需要通过 ajax 请求获取","category":"page"},{"location":"Front_end/4-Vuex/#.路由的理解","page":"-","title":"3.路由的理解","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.什么是路由?","page":"-","title":"1.什么是路由?","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.一个路由就是一组映射关系（key - value） ","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.key 为路径, value 可能是 function 或 component ","category":"page"},{"location":"Front_end/4-Vuex/#.路由分类","page":"-","title":"2.路由分类","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.后端路由：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.理解：value 是 function, 用于处理客户端提交的请求。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.工作过程：服务器接收到一个请求时, 根据**请求路径**找到匹配的**函数**来处理请求, 返回响应数据。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.前端路由：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.理解：value 是 component，用于展示页面内容。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.工作过程：当浏览器的路径改变时, 对应的组件就会显示。","category":"page"},{"location":"Front_end/4-Vuex/#.基本路由","page":"-","title":"2.基本路由","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.基本使用-2","page":"-","title":"1.基本使用","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.安装vue-router ,命令：npm i vue-router","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.应用插件：Vue.use(VueRouter)","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.编写router配置项：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router'\n\n// 引入组件\nimport About from '../pages/About'\nimport Home from '../pages/Home'\n\n// 创建并暴露一个路由器\nexport default new VueRouter({\n    routes:[\n      {\n        path:'/about',\n        component:About\n      },\n      {\n        path:'/home',\n        component:Home\n      }, \n    ]\n})","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"4.实现切换（active-class 可配置高亮样式）","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"<router-link active-class='active' to='/about'>About</router-link>","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"5.指定展示位置","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"<router-view></router-view>","category":"page"},{"location":"Front_end/4-Vuex/#.几个注意点","page":"-","title":"2.几个注意点","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t3.每个组件都有自己的route属性，里面存储着自己的路由信息。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t4.整个应用只有一个router,可以通过组件的router属性获取到。","category":"page"},{"location":"Front_end/4-Vuex/#.嵌套路由","page":"-","title":"3.嵌套路由","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.配置路由规则，使用children配置项","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"// 创建并暴露一个路由器\nexport default new VueRouter({\n    routes:[\n      {\n        path:'/about',\n        component:About\n      },\n      {\n        path:'/home',\n        component:Home,\n        children:[\n          {\n            // 这里不用加斜杠\n            path:'news',\n            component:News,\n          },\n          {\n            path:'message',\n            component:Message,\n          },\n        ]\n      }, \n    ]\n})\n","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.跳转（要写完整路径）","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"<router-link to='/home/news'>News</router-link>","category":"page"},{"location":"Front_end/4-Vuex/#.路由的query参数","page":"-","title":"4.路由的query参数","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.传递参数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"<li v-for=\"m in messagelist\" :key=\"m.id\">\n            <!-- 跳转路由并携带query参数，to的字符串写法 -->\n            <!-- <router-link :to=\"`/home/message/detail?id=${m.id}&title=${m.title}`\">{{ m.title }}</router-link>&nbsp;&nbsp; -->\n        \n            <!-- 跳转路由并携带query参数，to的对象写法 -->\n            <router-link :to=\"{\n                path:'/home/message/detail',\n                query:{\n                   id:m.id,\n                   title:m.title                     \n                }\n            }\">\n                {{ m.title }}\n            </router-link>\n            &nbsp;&nbsp;\n        </li>","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.接收参数：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":" $route.query.id \n $route.query.title ","category":"page"},{"location":"Front_end/4-Vuex/#.命名路由","page":"-","title":"5.命名路由","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.作用：可以简化路由的跳转","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.如何使用","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.给路由命名：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"export default new VueRouter({\n    routes:[\n      {\n        name:'guanyu',\n        path:'/about',\n        component:About\n      },\n      {\n        path:'/home',\n        component:Home,\n        children:[\n          {\n            // 这里不用加斜杠\n            path:'news',\n            component:News,\n          },\n          {\n            path:'message',\n            component:Message,\n            children:[\n              {\n                name:'xiangqing',\n                path:'detail',\n                component:Detail\n              }\n            ]\n          },\n        ]\n      }, \n    ]\n})","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.简化跳转：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"//1.简化前写完整路径\n<router-link :to=\"{\n                path:/home/message/detail',\n                query:{\n                   id:m.id,\n                   title:m.title                     \n                }\n            }\">\n//2.简化后直接通过名字跳转\n<router-link :to=\"{\n                name:'xiangqing',\n                query:{\n                   id:m.id,\n                   title:m.title                     \n                }\n            }\">","category":"page"},{"location":"Front_end/4-Vuex/#.路由的params参数","page":"-","title":"6.路由的params参数","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.配置路由，声明接收params参数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.传递参数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.接收参数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"$route.params.id\n$route.params.title","category":"page"},{"location":"Front_end/4-Vuex/#.路由的props配置","page":"-","title":"7.路由的props配置","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"作用：让路由组件更方便的收到参数","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"{\n                name:'xiangqing',\n                path:'detail',\n                component:Detail,\n        // props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件\n        // props:{a:1,b:'hello'}\n\n       // props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。\n       // props:true\n\n      // props的第三种写法，值为函数,该函数返回的对象中每一组key-value都会通过props传给Detail组件\n                props($route){\n                  return {\n                    id:$route.query.id,\n                    title:$route.query.title,\n                  }\n              }\n          }","category":"page"},{"location":"Front_end/4-Vuex/#.router-link-的replace属性","page":"-","title":"8.router-link 的replace属性","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.作用：控制路由跳转时操作浏览器历史记录的模式","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.浏览器的历史记录有两种写入方式：分别为push和replace,push是追加历史记录，replace是替换当前记录。路由跳转时默认为push","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t3.如何开启replace模式：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t<router-link replace ='true'>News</router-link>","category":"page"},{"location":"Front_end/4-Vuex/#.编程式路由导航","page":"-","title":"9.编程式路由导航","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.作用：不借助router-link实现路由跳转，让路由跳转更加灵活","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.具体编码：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"//$router的5个API\nthis.$router.push\nthis.$router.replace\nthis.$router.forward //前进\nthis.$router.back //后退\nthis.$router.go   //可前进可后退","category":"page"},{"location":"Front_end/4-Vuex/#.缓存路由组件","page":"-","title":"10.缓存路由组件","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.作用：让不展示的路由组件保持挂载，不被销毁","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.具体编码：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"<keep-alive include=\"MyNews\">\n            <router-view></router-view>\n</keep-alive>","category":"page"},{"location":"Front_end/4-Vuex/#.两个新的生命周期钩子","page":"-","title":"11.两个新的生命周期钩子","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.具体名字：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t\t1.activated 路由组件被激活时触发。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t\t2.deactivated 路由组件失活时触发。","category":"page"},{"location":"Front_end/4-Vuex/#.路由守卫","page":"-","title":"12.路由守卫","text":"","category":"section"},{"location":"Front_end/4-Vuex/#.作用：","page":"-","title":"1.作用：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"对路由进行权限控制","category":"page"},{"location":"Front_end/4-Vuex/#.分类：","page":"-","title":"2.分类：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"全局守卫、独享守卫、组件内守卫","category":"page"},{"location":"Front_end/4-Vuex/#.全局守卫：","page":"-","title":"3.全局守卫：","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"// 全局前置路由守卫——初始化的时候被调用、每次路由切换之前被调用\nrouter.beforeEach((to,from,next)=>{\n  console.log(to,from)\n  // 这里用to.name==='xinwen' ||to.name='xiaoxi'\n  if(to.meta.isAuth){  \n    if(localStorage.getItem('school')==='jiaoda'){\n    next()\n  }else{\n      alert('学校名不对，无权限查看!')}\n  }else{\n    next()\n  }\n})\n\n// 全局后置路由守卫————初始化的时候被调用，每次路由切换之后被调用\nrouter.afterEach((to,from)=>{\n  console.log(from)\n  document.title = to.meta.title  || '网页页面'\n})","category":"page"},{"location":"Front_end/4-Vuex/#.独享守卫","page":"-","title":"4.独享守卫","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":" beforeEnter:(to,from,next)=>{\n              console.log(to,from)\n              // 这里用to.name==='xinwen' ||to.name='xiaoxi'\n              if(to.meta.isAuth){  \n                if(localStorage.getItem('school')==='jiaoda'){\n                next()\n              }else{\n                  alert('学校名不对，无权限查看!')}\n              }else{\n                next()\n              }\n    }}","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"独享守卫可以和全局路由后置守卫配合使用，但是独享守卫不可以与全局路由前置守卫一起使用，会发生覆盖的情况。","category":"page"},{"location":"Front_end/4-Vuex/#.组件内守卫","page":"-","title":"5.组件内守卫","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"// 通过路由规则，进入该组件时被调用\n    beforeRouteEnter(to,from,next){\n      console.log(to,from)\n    if(to.meta.isAuth){  \n      if(localStorage.getItem('school')==='jiaoda'){\n      next()\n    }else{\n      alert('学校名不对，无权限查看!')}\n    }else{\n      next()\n    }\n    },\n\n// 通过路由规则，离开该组件时被调用\n    beforeRouteLeave(to,from,next){\n      next()\n    }","category":"page"},{"location":"Front_end/4-Vuex/#.路由器的两种工作模式","page":"-","title":"13.路由器的两种工作模式","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"1.对于一个url来说，什么是hash值？——#及其后面的内容就是hsah值","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"2.hsah值不会包含在HTTP请求中，即：hash值不会带给服务器。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"3.hash模式：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.地址中永远带着#好，不美观","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.若以后将地址通过第三方手机app分享，若app校验合格，则地址会被标记为不合法。","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t3.兼容性较好","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"4.history模式：","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.地址干净，美观","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.兼容性和hash模式相比略差","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t3.应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。","category":"page"},{"location":"Front_end/4-Vuex/#.Vue-UI组件库","page":"-","title":"6.Vue UI组件库","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"该部分无需笔记，直接看官方文档即可","category":"page"},{"location":"Front_end/4-Vuex/#.移动端常用-UI-组件库","page":"-","title":"1 .移动端常用 UI 组件库","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t1.Vant https://youzan.github.io/vant ","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t2.Cube UI https://didi.github.io/cube-ui ","category":"page"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"​\t3.Mint UI http://mint-ui.github.io ","category":"page"},{"location":"Front_end/4-Vuex/#.PC-端常用-UI-组件库","page":"-","title":"2 .PC 端常用 UI 组件库","text":"","category":"section"},{"location":"Front_end/4-Vuex/","page":"-","title":"-","text":"Element UI https://element.eleme.cn \nIView UI https://www.iviewui.co","category":"page"},{"location":"Front_end/2-JavaScript/#.JavaScript","page":"-","title":"2.JavaScript","text":"","category":"section"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"语法大全网站地址： https://blog.csdn.net/qq_51657072/article/details/128831333","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"const ——设置常量","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"##JavaScript\nconst todos=[\n{\n    id:1,\n    text:\"go on\",\n    isCompleted : true,\n},\n{\n    id:2,\n    text:\"fly away\",\n    isCompleted : true,\n},\n{\n    id:3,\n    text:\"try it out\",\n    isCompleted : true,\n},\n];\nconst todoJSON = JSON.stringify(todos)\nfor (let todo of todos){\nconsole.log(todo.text);\n}\nalert(\"验证正确\");//弹窗显示\ndocument.write(todos[0].text);//网页显示\n\n<!--html里注释是这样写的-->\n/*js和css里的多行注释这样写*/\n//单行注释","category":"page"},{"location":"Front_end/2-JavaScript/#正则表达","page":"-","title":"正则表达","text":"","category":"section"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"1.限定符 ？ *  + {...}","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"2.或 |运算符","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"3.字符类 元字符","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"4.贪婪与懒惰匹配","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"正则表达表单网站：","category":"page"},{"location":"Front_end/2-JavaScript/","page":"-","title":"-","text":"https://r2coding.com/#/README?id=%e5%b8%b8%e7%94%a8%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e7%a4%ba%e4%be%8b","category":"page"},{"location":"Front_end/1-说说console/#说说console","page":"说说console","title":"说说console","text":"","category":"section"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console是前端开发人员经常使用的调试工具，可以在控制台输出各种信息，以便快速地调试JavaScript代码。console语法与使用方法是入门前端开发中的必备技能之一。在本文中，将分步骤阐述console语法的基本知识。","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.log()","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.log()是console语法中最常用的方法。它可以在控制台输出任何类型的变量，如字符串、数字、数组、对象等。例如，下面的代码演示了如何使用console.log()方法输出一个字符串变量：","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"const greeting = \"Hello World!\";\nconsole.log(greeting);","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"​  当我们运行这段代码时，控制台将输出字符串\"Hello World!\"。通过console.log()方法，我们可以在控制台查看程序运行时的变量值，以便有效地调试代码。","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.error()","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.error()可以在控制台输出错误信息。它的输出会被标记为红色，以便开发者快速地定位问题。例如，下面的代码演示了如何使用console.error()方法输出一个错误信息：","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"const num1 = 10;\nconst num2 = \"ABC\";\nif (isNaN(num1) || isNaN(num2)) {\n  console.error(\"One or both variables are not numbers!\");\n}","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"​    当我们运行这段代码时，控制台将输出错误信息\"One or both variables are not numbers!\"。通过使用console.error()方法，我们可以迅速识别程序中的错误，并排除故障。","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.warn()","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.warn()可以在控制台上输出警告信息，以便开发者识别可能存在的问题，但不一定需要处理。例如，下面的代码演示了如何使用console.warn()方法：","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"const array = [1, 2, 3];\nconst index = 3;\nif (index > array.length - 1) {\n  console.warn(\"Index out of range!\");\n}","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"​    在这个例子中，当我们运行这段代码时，控制台会在index超出array长度范围时输出警告信息\"Index out of range!\"。通过使用console.warn()方法，我们可以识别问题并采取适当的行动，以避免产生更严重的后果。","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.group()","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.group()可用于将控制台信息分组显示，并便于开发者快速识别不同部分的输出。例如，下面的代码演示了如何使用console.group()方法：","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"console.group(\"UI Components\");\nconsole.log(\"Header\");\nconsole.log(\"Navigation Bar\");\nconsole.groupEnd();\n    console.group(\"Functions\");\nconsole.log(\"CalculateTax()\");\nconsole.log(\"CalculateInterest()\");\nconsole.groupEnd();","category":"page"},{"location":"Front_end/1-说说console/","page":"说说console","title":"说说console","text":"​    在这个例子中，控制台中的输出将分成两个组：一个是UI组件，另一个是函数。通过使用console.group()方法，我们可以让控制台输出更整洁，并增强代码的可读性。 ​    总之，console语法是前端开发的重要组成部分，学习和掌握它可以帮助我们更快地、更高效地调试代码。通过本文的介绍，我们了解了console语法中常用的一些方法和用法，包括console.log()、console.error()、console.warn()和console.group()。当我们在开发JavaScript应用程序时，应该善于利用这些工具来使我们的代码更加健壮和可靠。","category":"page"},{"location":"Front_end/2-ES (EcmaScript)/#.ES-（EcmaScript）","page":"-","title":"1.ES （EcmaScript）","text":"","category":"section"},{"location":"Front_end/2-ES (EcmaScript)/","page":"-","title":"-","text":"简介：脚本语言的规范。javascript是ES的一种实现。1.语法简洁2.框架开发应用3.前端开发职位要求","category":"page"},{"location":"Front_end/2-ES (EcmaScript)/","page":"-","title":"-","text":"ES6前端发展趋势，就业必备技能","category":"page"},{"location":"Front_end/5-Vue3笔记/#.Vue3笔记","page":"-","title":"4.Vue3笔记","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.引言","page":"-","title":"0.引言","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.-3.0发布的地址：","page":"-","title":"1.    3.0发布的地址：","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"https://github.com/vuejs/core/releases/tag/v3.0.0","category":"page"},{"location":"Front_end/5-Vue3笔记/#.-各个版本地址：","page":"-","title":"2.     各个版本地址：","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"https://github.com/vuejs/core/tags","category":"page"},{"location":"Front_end/5-Vue3笔记/#.vue3提升的方面","page":"-","title":"3.vue3提升的方面","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.性能提升","page":"-","title":"1.性能提升","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"渲染更快，内存更小","category":"page"},{"location":"Front_end/5-Vue3笔记/#.源码升级","page":"-","title":"2.源码升级","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"1.使用Proxy代替defineProperty实现响应式","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"2.重写虚拟 DOM的实现和Tree-Shanking","category":"page"},{"location":"Front_end/5-Vue3笔记/#.拥抱TypeScript","page":"-","title":"3.拥抱TypeScript","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"Vue3更好支持TypeScript    ","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"TS是未来前端所驱","category":"page"},{"location":"Front_end/5-Vue3笔记/#.新的特性","page":"-","title":"4.新的特性","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.composition-API(组合API)","page":"-","title":"1.composition API(组合API)","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"setup配置","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"ref与reactive","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"watch与watchEffect","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"provide与inject","category":"page"},{"location":"Front_end/5-Vue3笔记/#.新的内置组件","page":"-","title":"2.新的内置组件","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"Fragment","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"teleport","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"suspense","category":"page"},{"location":"Front_end/5-Vue3笔记/#.其他改变","page":"-","title":"3.其他改变","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"新的生命周期钩子","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"data选项应始终被声明为一个函数","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"移除keyCode支持作为v-on的修饰符","category":"page"},{"location":"Front_end/5-Vue3笔记/#.创建Vue3.0工程","page":"-","title":"1.创建Vue3.0工程","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.使用脚手架vue-cli创建","page":"-","title":"1.使用脚手架vue-cli创建","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create","category":"page"},{"location":"Front_end/5-Vue3笔记/#.使用vite创建","page":"-","title":"2.使用vite创建","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"vite官网：https://vitejs.cn","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"vite–––新一代前端构建工具（grunt、gulp、webpack）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"优势：1.开发环境中，无需打包操作，可快速冷启动","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t\t2.轻量快速的热重载（HMR）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t\t3.真正的按需编译，不再等待整个应用编译完成。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"## 创建工程\nnpm init vite-app <project-name>\n## 进入工程目录\ncd <project-name>\n## 安装依赖\nnpm install\n## 运行\nnpm run dev","category":"page"},{"location":"Front_end/5-Vue3笔记/#.常见Composition（组合式）-API","page":"-","title":"2.常见Composition（组合式） API","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.拉开序幕的setup","page":"-","title":"1.拉开序幕的setup","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"1.理解：Vue3.0中一个新的配置项，值为一个函数","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"2.setup是所有Composition API(组合API)\"表演的舞台\"","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"3.组件中所用到的：数据、方法等等，均要配置在setup中","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"4.setup函数的两种返回值：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t1.若返回一个对象，则对象中的属性、方法，在模版中均可以直接使用。（重点关注！）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t2.若返回一个渲染函数：则可以自定义渲染内容（了解）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"5.注意点：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t1.尽量不要与vue2.x配置混用","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\tvue.x的配置可以访问setup中的属性、方法","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t但在setup中不能访问到Vue2.x配置（data、methos、computed...）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t如有重名，setup优先","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t2.setup不能是一个async函数，因为返回值不再是return的对象，而是promise,模版看不到return对象中的属性。（后期也可以返回一个promise实例，但需要suspense和异步组件的配合）","category":"page"},{"location":"Front_end/5-Vue3笔记/#.ref函数","page":"-","title":"2.ref函数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"作用：定义一个响应式的数据","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"语法：const xxx=ref(initValue)","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t创建一个包含响应式数据的引用对象（reference对象,简称ref对象）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\tJS中操作数据 xxx.value","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t模版中读取数据：不需要 .value , 直接： <div>{{xxx}}</div>","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"备注： \t接收的数据可以是：基本类型，也可以是对象类型","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t基本类型的数据：响应式依然是靠 Object.defineProperty() 的get与set完成的","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t对象类型的数据：内部“求助”了Vue3.0中的一个新函数——reactive函数 ","category":"page"},{"location":"Front_end/5-Vue3笔记/#.reactive函数","page":"-","title":"3.reactive函数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"作用：定义一个对象类型的响应式函数（基本类型不要用它，要用ref函数）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"语法：const 代理对象 = reactive(源对象)接收一个对象（或数组），返回一个代理对象（proxy对象）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"reactive定义的响应式数据是“深层次的”","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"内部基于ES6的proxy实现，通过代理对象操作源对象内部数据进行操作","category":"page"},{"location":"Front_end/5-Vue3笔记/#.-Vue3.0的响应式","page":"-","title":"4. Vue3.0的响应式","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"通过Proxy(代理)：拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"通过Reflect(反射)：对被代理对象的属性进行操作","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"MDN文档中描述的Proxy与Reflect","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"//模拟Vue3中实现响应式\n    const p = new Proxy(person,{\n        // 有人读取p的某个属性时调用\n        get(target,propName){\n            console.log(`有人读取p身上的${propName}属性`)\n            return Reflect.get(target,propName)\n        },\n        // 有人修改p的某个属性、或给p追加某个属性时调用\n        set(target,propName,value){\n            console.log(`有人修改p身上的${propName}属性,我要去更新界面了`)\n            Reflect.set(target,propName,value)\n        },\n        // 有人删除p的某个属性时调用\n        deleteProperty(target,propName){\n            console.log(`有人删除p身上的${propName}属性,我要去更新界面了`)\n            return Reflect.deleteProperty(target,propName)\n        }\n    })","category":"page"},{"location":"Front_end/5-Vue3笔记/#.reactive对比ref","page":"-","title":"5.reactive对比ref","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"1.从定义数据角度对比：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\tref用来定义：基本类型数据","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\treactive用来定义：对象（或数组）类型数据","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t备注：ref也可以用来定义对象（或数组）类型数据，它内部会自动通过reactive转为代理对象","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"2.从原理角度对比： \t\tref通过object.defineProperty() 的get 与set来实现响应式（数据劫持）","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\treactive通过使用Proxy来实现响应式（数据劫持），并通过Reflect操作源对象内部的数据","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"3.从使用角度对比：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\tref定义的数据：操作数据需要 .value,读取数据时模版中直接读取不需要.value","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\treactive定义的数据：操作数据与读取数据：均不需要 .value","category":"page"},{"location":"Front_end/5-Vue3笔记/#.setup的两个注意点","page":"-","title":"6.setup的两个注意点","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.setup执行的时机","page":"-","title":"1.setup执行的时机","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t在beforeCreate之前执行一次，this是undefined","category":"page"},{"location":"Front_end/5-Vue3笔记/#.setup参数","page":"-","title":"2.setup参数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\tprops：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\tcontext:上下文对象","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t\t\t\tattrs:值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性，相当于this.atters","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t\t\t\tslots:收到的插槽内容，相当于this.slots","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t\t\t\temit:分发自定义事件的函数，相当于this.emit","category":"page"},{"location":"Front_end/5-Vue3笔记/#.计算属性","page":"-","title":"7.计算属性","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.computed函数","page":"-","title":"1.computed函数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"与Vue2.x中computed配置功能一致","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"写法：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"import {computed} from 'vue'\n\nsetup(){\n    ...\n\t//计算属性——简写\n    let fullName = computed(()=>{\n        return person.firstName + '-' + person.lastName\n    })\n    //计算属性——完整\n    let fullName = computed({\n        get(){\n            return person.firstName + '-' + person.lastName\n        },\n        set(value){\n            const nameArr = value.split('-')\n            person.firstName = nameArr[0]\n            person.lastName = nameArr[1]\n        }\n    })\n}","category":"page"},{"location":"Front_end/5-Vue3笔记/#.watch函数","page":"-","title":"2.watch函数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"与Vue2.x中watch配置功能一致","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"两个小“坑”：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t1.监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t2.监视reactive定义的响应式数据中某个属性时：deep配置有效。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"//情况一：监视ref定义的响应式数据\nwatch(sum,(newValue,oldValue)=>{\n\tconsole.log('sum变化了',newValue,oldValue)\n},{immediate:true})\n\n//情况二：监视多个ref定义的响应式数据\nwatch([sum,msg],(newValue,oldValue)=>{\n\tconsole.log('sum或msg变化了',newValue,oldValue)\n}) \n\n/* 情况三：监视reactive定义的响应式数据\n\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n*/\nwatch(person,(newValue,oldValue)=>{\n\tconsole.log('person变化了',newValue,oldValue)\n},{immediate:true,deep:false}) //此处的deep配置不再奏效\n\n//情况四：监视reactive定义的响应式数据中的某个属性\nwatch(()=>person.job,(newValue,oldValue)=>{\n\tconsole.log('person的job变化了',newValue,oldValue)\n},{immediate:true,deep:true}) \n\n//情况五：监视reactive定义的响应式数据中的某些属性\nwatch([()=>person.job,()=>person.name],(newValue,oldValue)=>{\n\tconsole.log('person的job变化了',newValue,oldValue)\n},{immediate:true,deep:true})\n\n//特殊情况\nwatch(()=>person.job,(newValue,oldValue)=>{\n    console.log('person的job变化了',newValue,oldValue)\n},{deep:true}) //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效","category":"page"},{"location":"Front_end/5-Vue3笔记/#.watchEffect函数","page":"-","title":"3.watchEffect函数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"watch的套路是：既要指明监视的属性，也要指明监视的回调。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"watchEffect有点像computed：","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"​\t\t而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\nwatchEffect(()=>{\n    const x1 = sum.value\n    const x2 = person.age\n    console.log('watchEffect配置的回调执行了')\n})","category":"page"},{"location":"Front_end/5-Vue3笔记/#.生命周期","page":"-","title":"8.生命周期","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"(Image: 组件生命周期图示)","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：\nbeforeDestroy改名为 beforeUnmount\ndestroyed改名为 unmounted\nVue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：\nbeforeCreate===>setup()\ncreated=======>setup()\nbeforeMount ===>onBeforeMount\nmounted=======>onMounted\nbeforeUpdate===>onBeforeUpdate\nupdated =======>onUpdated\nbeforeUnmount ==>onBeforeUnmount\nunmounted =====>onUnmounted","category":"page"},{"location":"Front_end/5-Vue3笔记/#.自定义hook函数","page":"-","title":"9.自定义hook函数","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"类似于vue2.x中的mixin。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。","category":"page"},{"location":"Front_end/5-Vue3笔记/#.toRef","page":"-","title":"10.toRef","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"语法：const name = toRef(person,'name')","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"应用: 要将响应式对象中的某个属性单独提供给外部使用时。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"扩展：toRefs 与toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)","category":"page"},{"location":"Front_end/5-Vue3笔记/#.其它-Composition-API","page":"-","title":"3.其它 Composition API","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.shallowReactive-与-shallowRef","page":"-","title":"1.shallowReactive 与 shallowRef","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"shallowReactive：只处理对象最外层属性的响应式（浅响应式）。\nshallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\n什么时候使用?\n如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowReactive。\n如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowRef。","category":"page"},{"location":"Front_end/5-Vue3笔记/#.readonly-与-shallowReadonly","page":"-","title":"2.readonly 与 shallowReadonly","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"readonly: 让一个响应式数据变为只读的（深只读）。\nshallowReadonly：让一个响应式数据变为只读的（浅只读）。\n应用场景: 不希望数据被修改时。","category":"page"},{"location":"Front_end/5-Vue3笔记/#.toRaw-与-markRaw","page":"-","title":"3.toRaw 与 markRaw","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"toRaw：\n作用：将一个由reactive生成的响应式对象转为普通对象。\n使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\nmarkRaw：\n作用：标记一个对象，使其永远不会再成为响应式对象。\n应用场景:\n有些值不应被设置为响应式的，例如复杂的第三方类库等。\n当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。","category":"page"},{"location":"Front_end/5-Vue3笔记/#.customRef","page":"-","title":"4.customRef","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\n实现防抖效果：\n<template>\n\t<input type=\"text\" v-model=\"keyword\">\n\t<h3>{{keyword}}</h3>\n</template>\n\n<script>\n\timport {ref,customRef} from 'vue'\n\texport default {\n\t\tname:'Demo',\n\t\tsetup(){\n\t\t\t// let keyword = ref('hello') //使用Vue准备好的内置ref\n\t\t\t//自定义一个myRef\n\t\t\tfunction myRef(value,delay){\n\t\t\t\tlet timer\n\t\t\t\t//通过customRef去实现自定义\n\t\t\t\treturn customRef((track,trigger)=>{\n\t\t\t\t\treturn{\n\t\t\t\t\t\tget(){\n\t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset(newValue){\n\t\t\t\t\t\t\tclearTimeout(timer)\n\t\t\t\t\t\t\ttimer = setTimeout(()=>{\n\t\t\t\t\t\t\t\tvalue = newValue\n\t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面\n\t\t\t\t\t\t\t},delay)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\tlet keyword = myRef('hello',500) //使用程序员自定义的ref\n\t\t\treturn {\n\t\t\t\tkeyword\n\t\t\t}\n\t\t}\n\t}\n</script>","category":"page"},{"location":"Front_end/5-Vue3笔记/#.provide-与-inject","page":"-","title":"5.provide 与 inject","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"作用：实现祖与后代组件间通信\n套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据\n具体写法：\n祖组件中：\nsetup(){\n    ......\n    let car = reactive({name:'奔驰',price:'40万'})\n    provide('car',car)\n    ......\n}\n后代组件中：\nsetup(props,context){\n    ......\n    const car = inject('car')\n    return {car}\n    ......\n}","category":"page"},{"location":"Front_end/5-Vue3笔记/#.响应式数据的判断","page":"-","title":"6.响应式数据的判断","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"isRef: 检查一个值是否为一个 ref 对象\nisReactive: 检查一个对象是否是由 reactive 创建的响应式代理\nisReadonly: 检查一个对象是否是由 readonly 创建的只读代理\nisProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理","category":"page"},{"location":"Front_end/5-Vue3笔记/#.Composition-API-的优势","page":"-","title":"4.Composition API 的优势","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.Options-API-存在的问题","page":"-","title":"1.Options API 存在的问题","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"(Image: img)","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"(Image: img)","category":"page"},{"location":"Front_end/5-Vue3笔记/#.Composition-API-的优势-2","page":"-","title":"2.Composition API 的优势","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"(Image: img)","category":"page"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"(Image: img)","category":"page"},{"location":"Front_end/5-Vue3笔记/#.新的组件","page":"-","title":"5.新的组件","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.Fragment","page":"-","title":"1.Fragment","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"在Vue2中: 组件必须有一个根标签\n在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\n好处: 减少标签层级, 减小内存占用","category":"page"},{"location":"Front_end/5-Vue3笔记/#.Teleport","page":"-","title":"2.Teleport","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"什么是Teleport？—— Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。\n<teleport to=\"移动位置\">\n\t<div v-if=\"isShow\" class=\"mask\">\n\t\t<div class=\"dialog\">\n\t\t\t<h3>我是一个弹窗</h3>\n\t\t\t<button @click=\"isShow = false\">关闭弹窗</button>\n\t\t</div>\n\t</div>\n</teleport>","category":"page"},{"location":"Front_end/5-Vue3笔记/#.Suspense","page":"-","title":"3.Suspense","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"等待异步组件时渲染一些额外内容，让应用有更好的用户体验\n使用步骤：\n异步引入组件\nimport {defineAsyncComponent} from 'vue'\nconst Child = defineAsyncComponent(()=>import('./components/Child.vue'))\n使用Suspense包裹组件，并配置好default 与 fallback\n<template>\n    <div class=\"app\">\n        <h3>我是App组件</h3>\n        <Suspense>\n            <template v-slot:default>\n                <Child/>\n            </template>\n            <template v-slot:fallback>\n                <h3>加载中.....</h3>\n            </template>\n        </Suspense>\n    </div>\n</template>","category":"page"},{"location":"Front_end/5-Vue3笔记/#.其他","page":"-","title":"6.其他","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/#.全局API的转移","page":"-","title":"1.全局API的转移","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"Vue 2.x 有许多全局 API 和配置。\n例如：注册全局组件、注册全局指令等。\n//注册全局组件\nVue.component('MyButton', {\n  data: () => ({\n    count: 0\n  }),\n  template: '<button @click=\"count++\">Clicked {{ count }} times.</button>'\n})\n\n//注册全局指令\nVue.directive('focus', {\n  inserted: el => el.focus()\n})\nVue3.0中对这些API做出了调整：\n将全局的API，即：Vue.xxx调整到应用实例（app）上","category":"page"},{"location":"Front_end/5-Vue3笔记/#.其他改变-2","page":"-","title":"2.其他改变","text":"","category":"section"},{"location":"Front_end/5-Vue3笔记/","page":"-","title":"-","text":"data选项应始终被声明为一个函数。\n过度类名的更改：\nVue2.x写法\n.v-enter,\n.v-leave-to {\n  opacity: 0;\n}\n.v-leave,\n.v-enter-to {\n  opacity: 1;\n}\nVue3.x写法\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n\n.v-leave-from,\n.v-enter-to {\n  opacity: 1;\n}\n移除keyCode作为 v-on 的修饰符，同时也不再支持config.keyCodes\n移除v-on.native修饰符\n父组件中绑定事件\n<my-component\n  v-on:close=\"handleComponentEvent\"\n  v-on:click=\"handleNativeClickEvent\"\n/>\n子组件中声明自定义事件\n<script>\n  export default {\n    emits: ['close']\n  }\n</script>\n移除过滤器（filter）\n过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。","category":"page"},{"location":"#study-note-个人学习文档分享空间","page":"Home","title":"study-note 个人学习文档分享空间","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable)","category":"page"},{"location":"#学习文档内容","page":"Home","title":"学习文档内容","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"dirs = [\"Optimization\",\"Front_end\",\"mac_share\"]\n\"总篇数：$(sum(map(file -> length(readdir(joinpath(@__DIR__,\"..\",\"src\",file))), dirs)))\"","category":"page"},{"location":"#优化","page":"Home","title":"优化","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = map(file -> joinpath(\"Optimization\", file), readdir(\"Optimization\"))","category":"page"},{"location":"#前端","page":"Home","title":"前端","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = map(file -> joinpath(\"Front_end\", file), readdir(\"Front_end\"))","category":"page"},{"location":"#mac","page":"Home","title":"mac","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = map(file -> joinpath(\"mac_share\", file), readdir(\"mac_share\"))","category":"page"},{"location":"mac_share/1-Mac环境变量的配置/#Mac环境变量的配置","page":"Mac环境变量的配置","title":"Mac环境变量的配置","text":"","category":"section"}]
}
